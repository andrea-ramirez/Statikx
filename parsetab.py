
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVAND ARROW ASIGN BOXPLOT CHAR COMMA COMMENT CTEC CTEF CTEI DATAFRAME DIV DO EQUALS FLOAT FOR FUNC GREATER_THAN ID IF IF_FALSE IF_TRUE INT LEFT_CUR_BRACKET LEFT_PARENT LEFT_SQR_BRACKET LESS_THAN LETRERO LINREG MAX MEAN MEDIAN MIN MINUS MODE MULT NOTEQUALS OR PLUS READ READ_FILE RETURNS RIGHT_CUR_BRACKET RIGHT_PARENT RIGHT_SQR_BRACKET SCRIPT SEMICOLON STADDES VAR VARIANCE VOID WHILE WRITE\n    programa : SCRIPT ID SEMICOLON varp funcp bloque\n    varp : var varp \n         | empty\n    funcp : func funcp \n          | empty\n    \n    bloque : DO LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    estatutop : estatuto estatutop \n              | empty\n    \n    tipo_simp : INT \n              | FLOAT \n              | CHAR\n    \n    tipo_comp : DATAFRAME \n              | file\n    \n    copy : READ_FILE LEFT_PARENT file RIGHT_PARENT SEMICOLON\n    \n    file : ID\n    \n    variable : ID indexp\n    indexp : LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET \n           | empty\n    indexpp : COMMA exp \n            | empty\n    \n    llamada : ID LEFT_PARENT exp expp RIGHT_PARENT SEMICOLON\n    expp : COMMA exp expp \n         | empty\n    \n    var : VAR v ARROW idp SEMICOLON\n    v : DATAFRAME \n      | tipo_simp vp\n    vp : LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET \n       | empty\n    vpp : COMMA CTEI \n        | empty\n    idp : ID\n        | COMMA ID idp\n        | empty\n    \n    func : FUNC returnval ARROW ID LEFT_PARENT param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET\n    returnval : tipo_simp \n              | VOID\n    \n    param : tipo_simp ARROW ID paramp \n          | empty\n    paramp : COMMA param paramp \n           | empty\n    \n    estatuto : asign\n             | llamada\n             | lee\n             | escribe\n             | condicion\n             | ciclow\n             | ciclof\n             | funcesp\n             | return\n             | copy\n    \n    asign : variable ASIGN exp SEMICOLON\n    \n    lee : READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    escribe :  WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON\n    escribep : exp \n             | LETRERO\n    \n    return : RETURNS exp SEMICOLON\n    \n    exp : exprel logic\n    logic : logicsig exprel logic \n          | empty\n    logicsig : AND \n             | OR\n    \n    exprel : e relacionalp\n    relacionalp : relsig e relacionalp \n                | empty\n    relsig : LESS_THAN \n           | GREATER_THAN \n           | EQUALS \n           | NOTEQUALS\n    \n    e : t tp\n    tp : tsig t tp \n       | empty\n    tsig : PLUS \n         | MINUS\n    \n    t : f fp\n    fp : fsig f fp \n       | empty\n    fsig : MULT \n         | DIV\n    \n    f : LEFT_PARENT exp RIGHT_PARENT\n      | CTEI\n      | CTEF\n      | CTEC\n      | variable\n      | llamada\n    \n    condicion : IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE estatutop RIGHT_CUR_BRACKET falsop\n    falsop : IF_FALSE estatutop RIGHT_CUR_BRACKET \n           | empty\n    \n    ciclow : WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    ciclof : FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    funcesp : mean\n            | mode\n            | median\n            | variance\n            | max\n            | min\n            | staddes\n            | boxplot\n            | linreg\n    \n    mean : MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    mode : MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    median : MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    variance : VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    max : MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    min : MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    staddes : STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    boxplot : BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    linreg : LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    empty :'
    
_lr_action_items = {'SCRIPT':([0,],[2,]),'$end':([1,20,83,],[0,-1,-6,]),'ID':([2,6,7,13,26,30,31,34,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,66,78,79,85,86,88,90,91,92,93,94,100,107,108,109,110,111,112,113,114,115,116,131,132,134,136,137,139,141,142,143,144,146,148,149,151,153,154,170,172,175,198,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[3,-108,-3,-2,33,51,77,79,51,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,106,-24,33,106,106,106,125,106,106,106,125,106,157,125,125,125,125,125,125,125,125,125,106,-56,106,-60,-61,106,-65,-66,-67,-68,106,-72,-73,106,-77,-78,-51,106,106,223,-52,-53,51,51,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,51,51,-108,-88,-85,51,-87,-89,-86,]),'SEMICOLON':([3,26,32,33,35,79,87,89,95,96,97,98,99,101,102,103,104,105,106,118,121,133,135,138,140,145,147,150,152,177,178,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,201,208,209,210,211,224,],[4,-108,78,-31,-33,-108,-16,-18,132,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,-32,170,-57,-59,-62,-64,-69,-71,-74,-76,203,204,-108,-108,-108,-108,-79,212,213,214,215,216,217,218,219,220,221,224,-17,-58,-63,-70,-75,-21,]),'VAR':([4,6,78,222,],[8,8,-24,8,]),'FUNC':([4,5,6,7,10,13,78,242,],[-108,12,-108,-3,12,-2,-24,-34,]),'DO':([4,5,6,7,9,10,11,13,22,78,242,],[-108,-108,-108,-3,21,-108,-5,-2,-4,-24,-34,]),'READ':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,52,52,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,52,52,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,52,52,-108,-88,-85,52,-87,-89,-86,]),'WRITE':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,53,53,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,53,53,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,53,53,-108,-88,-85,53,-87,-89,-86,]),'IF':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,54,54,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,54,54,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,54,54,-108,-88,-85,54,-87,-89,-86,]),'WHILE':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,55,55,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,55,55,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,55,55,-108,-88,-85,55,-87,-89,-86,]),'FOR':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,56,56,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,56,56,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,56,56,-108,-88,-85,56,-87,-89,-86,]),'RETURNS':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,66,66,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,66,66,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,66,66,-108,-88,-85,66,-87,-89,-86,]),'READ_FILE':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,67,67,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,67,67,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,67,67,-108,-88,-85,67,-87,-89,-86,]),'MEAN':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,68,68,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,68,68,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,68,68,-108,-88,-85,68,-87,-89,-86,]),'MODE':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,69,69,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,69,69,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,69,69,-108,-88,-85,69,-87,-89,-86,]),'MEDIAN':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,70,70,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,70,70,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,70,70,-108,-88,-85,70,-87,-89,-86,]),'VARIANCE':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,71,71,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,71,71,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,71,71,-108,-88,-85,71,-87,-89,-86,]),'MAX':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,72,72,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,72,72,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,72,72,-108,-88,-85,72,-87,-89,-86,]),'MIN':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,73,73,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,73,73,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,73,73,-108,-88,-85,73,-87,-89,-86,]),'STADDES':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,74,74,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,74,74,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,74,74,-108,-88,-85,74,-87,-89,-86,]),'BOXPLOT':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,75,75,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,75,75,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,75,75,-108,-88,-85,75,-87,-89,-86,]),'LINREG':([6,7,13,30,38,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,228,229,233,234,238,239,240,241,245,],[-108,-3,-2,76,76,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-56,-51,-52,-53,76,76,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,76,76,-108,-88,-85,76,-87,-89,-86,]),'RIGHT_CUR_BRACKET':([6,7,13,30,37,38,39,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,62,63,64,65,78,84,132,170,203,204,205,206,212,213,214,215,216,217,218,219,220,221,222,224,226,227,228,229,233,234,235,236,238,239,240,241,244,245,],[-108,-3,-2,-108,83,-108,-8,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-24,-7,-56,-51,-52,-53,-108,-108,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-21,233,234,-108,-108,-108,-88,241,242,-85,-108,-87,-89,245,-86,]),'DATAFRAME':([8,],[15,]),'INT':([8,12,117,231,],[17,17,17,17,]),'FLOAT':([8,12,117,231,],[18,18,18,18,]),'CHAR':([8,12,117,231,],[19,19,19,19,]),'VOID':([12,],[25,]),'ARROW':([14,15,16,17,18,19,23,24,25,27,29,119,168,],[26,-25,-108,-9,-10,-11,31,-35,-36,-26,-28,-27,198,]),'LEFT_SQR_BRACKET':([16,17,18,19,51,106,125,],[28,-9,-10,-11,88,88,88,]),'LEFT_CUR_BRACKET':([21,180,197,207,],[30,206,222,228,]),'COMMA':([26,36,79,87,89,96,97,98,99,101,102,103,104,105,106,122,123,133,135,138,140,145,147,150,152,169,182,183,184,185,186,200,201,208,209,210,211,223,224,230,231,232,237,243,],[34,81,34,-16,-18,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,172,175,-57,-59,-62,-64,-69,-71,-74,-76,-38,-108,-108,-108,-108,-79,172,-17,-58,-63,-70,-75,231,-21,-37,-108,-40,231,-39,]),'CTEI':([28,66,81,85,86,88,91,92,93,100,131,134,136,137,139,141,142,143,144,146,148,149,151,153,154,170,172,175,],[36,101,120,101,101,101,101,101,101,101,101,101,-60,-61,101,-65,-66,-67,-68,101,-72,-73,101,-77,-78,-51,101,101,]),'RIGHT_SQR_BRACKET':([36,80,82,87,89,96,97,98,99,101,102,103,104,105,106,120,123,133,135,138,140,145,147,150,152,174,176,182,183,184,185,186,201,202,208,209,210,211,224,],[-108,119,-30,-16,-18,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,-29,-108,-57,-59,-62,-64,-69,-71,-74,-76,201,-20,-108,-108,-108,-108,-79,-17,-19,-58,-63,-70,-75,-21,]),'ASIGN':([50,51,87,89,125,201,],[85,-108,-16,-18,-108,-17,]),'LEFT_PARENT':([51,52,53,54,55,56,66,67,68,69,70,71,72,73,74,75,76,77,85,86,88,91,92,93,100,106,131,134,136,137,139,141,142,143,144,146,148,149,151,153,154,170,172,175,],[86,90,91,92,93,94,100,107,108,109,110,111,112,113,114,115,116,117,100,100,100,100,100,100,100,86,100,100,-60,-61,100,-65,-66,-67,-68,100,-72,-73,100,-77,-78,-51,100,100,]),'CTEF':([66,85,86,88,91,92,93,100,131,134,136,137,139,141,142,143,144,146,148,149,151,153,154,170,172,175,],[102,102,102,102,102,102,102,102,102,102,-60,-61,102,-65,-66,-67,-68,102,-72,-73,102,-77,-78,-51,102,102,]),'CTEC':([66,85,86,88,91,92,93,100,131,134,136,137,139,141,142,143,144,146,148,149,151,153,154,170,172,175,],[103,103,103,103,103,103,103,103,103,103,-60,-61,103,-65,-66,-67,-68,103,-72,-73,103,-77,-78,-51,103,103,]),'MULT':([87,89,99,101,102,103,104,105,106,185,186,201,224,],[-16,-18,153,-80,-81,-82,-83,-84,-108,153,-79,-17,-21,]),'DIV':([87,89,99,101,102,103,104,105,106,185,186,201,224,],[-16,-18,154,-80,-81,-82,-83,-84,-108,154,-79,-17,-21,]),'PLUS':([87,89,98,99,101,102,103,104,105,106,150,152,184,185,186,201,211,224,],[-16,-18,148,-108,-80,-81,-82,-83,-84,-108,-74,-76,148,-108,-79,-17,-75,-21,]),'MINUS':([87,89,98,99,101,102,103,104,105,106,150,152,184,185,186,201,211,224,],[-16,-18,149,-108,-80,-81,-82,-83,-84,-108,-74,-76,149,-108,-79,-17,-75,-21,]),'LESS_THAN':([87,89,97,98,99,101,102,103,104,105,106,145,147,150,152,183,184,185,186,201,210,211,224,],[-16,-18,141,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,141,-108,-108,-79,-17,-70,-75,-21,]),'GREATER_THAN':([87,89,97,98,99,101,102,103,104,105,106,145,147,150,152,183,184,185,186,201,210,211,224,],[-16,-18,142,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,142,-108,-108,-79,-17,-70,-75,-21,]),'EQUALS':([87,89,97,98,99,101,102,103,104,105,106,145,147,150,152,183,184,185,186,201,210,211,224,],[-16,-18,143,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,143,-108,-108,-79,-17,-70,-75,-21,]),'NOTEQUALS':([87,89,97,98,99,101,102,103,104,105,106,145,147,150,152,183,184,185,186,201,210,211,224,],[-16,-18,144,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,144,-108,-108,-79,-17,-70,-75,-21,]),'AND':([87,89,96,97,98,99,101,102,103,104,105,106,138,140,145,147,150,152,182,183,184,185,186,201,209,210,211,224,],[-16,-18,136,-108,-108,-108,-80,-81,-82,-83,-84,-108,-62,-64,-69,-71,-74,-76,136,-108,-108,-108,-79,-17,-63,-70,-75,-21,]),'OR':([87,89,96,97,98,99,101,102,103,104,105,106,138,140,145,147,150,152,182,183,184,185,186,201,209,210,211,224,],[-16,-18,137,-108,-108,-108,-80,-81,-82,-83,-84,-108,-62,-64,-69,-71,-74,-76,137,-108,-108,-108,-79,-17,-63,-70,-75,-21,]),'RIGHT_PARENT':([87,89,96,97,98,99,101,102,103,104,105,106,117,122,124,125,126,127,128,129,130,133,135,138,140,145,147,150,152,155,156,157,158,159,160,161,162,163,164,165,166,167,169,171,173,181,182,183,184,185,186,200,201,208,209,210,211,223,224,225,230,231,232,237,243,],[-16,-18,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,-108,-108,177,-108,178,-54,-55,179,180,-57,-59,-62,-64,-69,-71,-74,-76,186,187,-15,188,189,190,191,192,193,194,195,196,197,-38,199,-23,207,-108,-108,-108,-108,-79,-108,-17,-58,-63,-70,-75,-108,-21,-22,-37,-108,-40,-108,-39,]),'LETRERO':([91,],[128,]),'IF_TRUE':([179,],[205,]),'IF_FALSE':([233,],[239,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'varp':([4,6,222,],[5,13,229,]),'var':([4,6,222,],[6,6,6,]),'empty':([4,5,6,10,16,26,30,36,38,51,79,96,97,98,99,106,117,122,123,125,182,183,184,185,200,205,206,222,223,228,229,231,233,237,239,],[7,11,7,11,29,35,39,82,39,89,35,135,140,147,152,89,169,173,176,89,135,140,147,152,173,39,39,7,232,39,39,169,240,232,39,]),'funcp':([5,10,],[9,22,]),'func':([5,10,],[10,10,]),'v':([8,],[14,]),'tipo_simp':([8,12,117,231,],[16,24,168,168,]),'bloque':([9,],[20,]),'returnval':([12,],[23,]),'vp':([16,],[27,]),'idp':([26,79,],[32,118,]),'estatutop':([30,38,205,206,228,229,239,],[37,84,226,227,235,236,244,]),'estatuto':([30,38,205,206,228,229,239,],[38,38,38,38,38,38,38,]),'asign':([30,38,94,205,206,228,229,239,],[40,40,131,40,40,40,40,40,]),'llamada':([30,38,66,85,86,88,91,92,93,100,131,134,139,146,151,172,175,205,206,228,229,239,],[41,41,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,41,41,41,41,41,]),'lee':([30,38,205,206,228,229,239,],[42,42,42,42,42,42,42,]),'escribe':([30,38,205,206,228,229,239,],[43,43,43,43,43,43,43,]),'condicion':([30,38,205,206,228,229,239,],[44,44,44,44,44,44,44,]),'ciclow':([30,38,205,206,228,229,239,],[45,45,45,45,45,45,45,]),'ciclof':([30,38,205,206,228,229,239,],[46,46,46,46,46,46,46,]),'funcesp':([30,38,205,206,228,229,239,],[47,47,47,47,47,47,47,]),'return':([30,38,205,206,228,229,239,],[48,48,48,48,48,48,48,]),'copy':([30,38,205,206,228,229,239,],[49,49,49,49,49,49,49,]),'variable':([30,38,66,85,86,88,90,91,92,93,94,100,108,109,110,111,112,113,114,115,116,131,134,139,146,151,172,175,205,206,228,229,239,],[50,50,104,104,104,104,124,104,104,104,50,104,158,159,160,161,162,163,164,165,166,104,104,104,104,104,104,104,50,50,50,50,50,]),'mean':([30,38,205,206,228,229,239,],[57,57,57,57,57,57,57,]),'mode':([30,38,205,206,228,229,239,],[58,58,58,58,58,58,58,]),'median':([30,38,205,206,228,229,239,],[59,59,59,59,59,59,59,]),'variance':([30,38,205,206,228,229,239,],[60,60,60,60,60,60,60,]),'max':([30,38,205,206,228,229,239,],[61,61,61,61,61,61,61,]),'min':([30,38,205,206,228,229,239,],[62,62,62,62,62,62,62,]),'staddes':([30,38,205,206,228,229,239,],[63,63,63,63,63,63,63,]),'boxplot':([30,38,205,206,228,229,239,],[64,64,64,64,64,64,64,]),'linreg':([30,38,205,206,228,229,239,],[65,65,65,65,65,65,65,]),'vpp':([36,],[80,]),'indexp':([51,106,125,],[87,87,87,]),'exp':([66,85,86,88,91,92,93,100,131,172,175,],[95,121,122,123,127,129,130,155,181,200,202,]),'exprel':([66,85,86,88,91,92,93,100,131,134,172,175,],[96,96,96,96,96,96,96,96,96,182,96,96,]),'e':([66,85,86,88,91,92,93,100,131,134,139,172,175,],[97,97,97,97,97,97,97,97,97,97,183,97,97,]),'t':([66,85,86,88,91,92,93,100,131,134,139,146,172,175,],[98,98,98,98,98,98,98,98,98,98,98,184,98,98,]),'f':([66,85,86,88,91,92,93,100,131,134,139,146,151,172,175,],[99,99,99,99,99,99,99,99,99,99,99,99,185,99,99,]),'escribep':([91,],[126,]),'logic':([96,182,],[133,208,]),'logicsig':([96,182,],[134,134,]),'relacionalp':([97,183,],[138,209,]),'relsig':([97,183,],[139,139,]),'tp':([98,184,],[145,210,]),'tsig':([98,184,],[146,146,]),'fp':([99,185,],[150,211,]),'fsig':([99,185,],[151,151,]),'file':([107,],[156,]),'param':([117,231,],[167,237,]),'expp':([122,200,],[171,225,]),'indexpp':([123,],[174,]),'paramp':([223,237,],[230,243,]),'falsop':([233,],[238,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> SCRIPT ID SEMICOLON varp funcp bloque','programa',6,'p_programa','lexer-parser.py',153),
  ('varp -> var varp','varp',2,'p_programa','lexer-parser.py',154),
  ('varp -> empty','varp',1,'p_programa','lexer-parser.py',155),
  ('funcp -> func funcp','funcp',2,'p_programa','lexer-parser.py',156),
  ('funcp -> empty','funcp',1,'p_programa','lexer-parser.py',157),
  ('bloque -> DO LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','bloque',4,'p_bloque','lexer-parser.py',163),
  ('estatutop -> estatuto estatutop','estatutop',2,'p_bloque','lexer-parser.py',164),
  ('estatutop -> empty','estatutop',1,'p_bloque','lexer-parser.py',165),
  ('tipo_simp -> INT','tipo_simp',1,'p_tipo_simp','lexer-parser.py',171),
  ('tipo_simp -> FLOAT','tipo_simp',1,'p_tipo_simp','lexer-parser.py',172),
  ('tipo_simp -> CHAR','tipo_simp',1,'p_tipo_simp','lexer-parser.py',173),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','lexer-parser.py',179),
  ('tipo_comp -> file','tipo_comp',1,'p_tipo_comp','lexer-parser.py',180),
  ('copy -> READ_FILE LEFT_PARENT file RIGHT_PARENT SEMICOLON','copy',5,'p_copy','lexer-parser.py',186),
  ('file -> ID','file',1,'p_file','lexer-parser.py',192),
  ('variable -> ID indexp','variable',2,'p_variable','lexer-parser.py',198),
  ('indexp -> LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET','indexp',4,'p_variable','lexer-parser.py',199),
  ('indexp -> empty','indexp',1,'p_variable','lexer-parser.py',200),
  ('indexpp -> COMMA exp','indexpp',2,'p_variable','lexer-parser.py',201),
  ('indexpp -> empty','indexpp',1,'p_variable','lexer-parser.py',202),
  ('llamada -> ID LEFT_PARENT exp expp RIGHT_PARENT SEMICOLON','llamada',6,'p_llamada','lexer-parser.py',208),
  ('expp -> COMMA exp expp','expp',3,'p_llamada','lexer-parser.py',209),
  ('expp -> empty','expp',1,'p_llamada','lexer-parser.py',210),
  ('var -> VAR v ARROW idp SEMICOLON','var',5,'p_var','lexer-parser.py',216),
  ('v -> DATAFRAME','v',1,'p_var','lexer-parser.py',217),
  ('v -> tipo_simp vp','v',2,'p_var','lexer-parser.py',218),
  ('vp -> LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET','vp',4,'p_var','lexer-parser.py',219),
  ('vp -> empty','vp',1,'p_var','lexer-parser.py',220),
  ('vpp -> COMMA CTEI','vpp',2,'p_var','lexer-parser.py',221),
  ('vpp -> empty','vpp',1,'p_var','lexer-parser.py',222),
  ('idp -> ID','idp',1,'p_var','lexer-parser.py',223),
  ('idp -> COMMA ID idp','idp',3,'p_var','lexer-parser.py',224),
  ('idp -> empty','idp',1,'p_var','lexer-parser.py',225),
  ('func -> FUNC returnval ARROW ID LEFT_PARENT param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET','func',11,'p_func','lexer-parser.py',231),
  ('returnval -> tipo_simp','returnval',1,'p_func','lexer-parser.py',232),
  ('returnval -> VOID','returnval',1,'p_func','lexer-parser.py',233),
  ('param -> tipo_simp ARROW ID paramp','param',4,'p_param','lexer-parser.py',239),
  ('param -> empty','param',1,'p_param','lexer-parser.py',240),
  ('paramp -> COMMA param paramp','paramp',3,'p_param','lexer-parser.py',241),
  ('paramp -> empty','paramp',1,'p_param','lexer-parser.py',242),
  ('estatuto -> asign','estatuto',1,'p_estatuto','lexer-parser.py',248),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','lexer-parser.py',249),
  ('estatuto -> lee','estatuto',1,'p_estatuto','lexer-parser.py',250),
  ('estatuto -> escribe','estatuto',1,'p_estatuto','lexer-parser.py',251),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexer-parser.py',252),
  ('estatuto -> ciclow','estatuto',1,'p_estatuto','lexer-parser.py',253),
  ('estatuto -> ciclof','estatuto',1,'p_estatuto','lexer-parser.py',254),
  ('estatuto -> funcesp','estatuto',1,'p_estatuto','lexer-parser.py',255),
  ('estatuto -> return','estatuto',1,'p_estatuto','lexer-parser.py',256),
  ('estatuto -> copy','estatuto',1,'p_estatuto','lexer-parser.py',257),
  ('asign -> variable ASIGN exp SEMICOLON','asign',4,'p_asign','lexer-parser.py',263),
  ('lee -> READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON','lee',5,'p_lee','lexer-parser.py',269),
  ('escribe -> WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON','escribe',5,'p_escribe','lexer-parser.py',275),
  ('escribep -> exp','escribep',1,'p_escribe','lexer-parser.py',276),
  ('escribep -> LETRERO','escribep',1,'p_escribe','lexer-parser.py',277),
  ('return -> RETURNS exp SEMICOLON','return',3,'p_return','lexer-parser.py',283),
  ('exp -> exprel logic','exp',2,'p_exp','lexer-parser.py',289),
  ('logic -> logicsig exprel logic','logic',3,'p_exp','lexer-parser.py',290),
  ('logic -> empty','logic',1,'p_exp','lexer-parser.py',291),
  ('logicsig -> AND','logicsig',1,'p_exp','lexer-parser.py',292),
  ('logicsig -> OR','logicsig',1,'p_exp','lexer-parser.py',293),
  ('exprel -> e relacionalp','exprel',2,'p_exprel','lexer-parser.py',299),
  ('relacionalp -> relsig e relacionalp','relacionalp',3,'p_exprel','lexer-parser.py',300),
  ('relacionalp -> empty','relacionalp',1,'p_exprel','lexer-parser.py',301),
  ('relsig -> LESS_THAN','relsig',1,'p_exprel','lexer-parser.py',302),
  ('relsig -> GREATER_THAN','relsig',1,'p_exprel','lexer-parser.py',303),
  ('relsig -> EQUALS','relsig',1,'p_exprel','lexer-parser.py',304),
  ('relsig -> NOTEQUALS','relsig',1,'p_exprel','lexer-parser.py',305),
  ('e -> t tp','e',2,'p_e','lexer-parser.py',311),
  ('tp -> tsig t tp','tp',3,'p_e','lexer-parser.py',312),
  ('tp -> empty','tp',1,'p_e','lexer-parser.py',313),
  ('tsig -> PLUS','tsig',1,'p_e','lexer-parser.py',314),
  ('tsig -> MINUS','tsig',1,'p_e','lexer-parser.py',315),
  ('t -> f fp','t',2,'p_t','lexer-parser.py',321),
  ('fp -> fsig f fp','fp',3,'p_t','lexer-parser.py',322),
  ('fp -> empty','fp',1,'p_t','lexer-parser.py',323),
  ('fsig -> MULT','fsig',1,'p_t','lexer-parser.py',324),
  ('fsig -> DIV','fsig',1,'p_t','lexer-parser.py',325),
  ('f -> LEFT_PARENT exp RIGHT_PARENT','f',3,'p_f','lexer-parser.py',331),
  ('f -> CTEI','f',1,'p_f','lexer-parser.py',332),
  ('f -> CTEF','f',1,'p_f','lexer-parser.py',333),
  ('f -> CTEC','f',1,'p_f','lexer-parser.py',334),
  ('f -> variable','f',1,'p_f','lexer-parser.py',335),
  ('f -> llamada','f',1,'p_f','lexer-parser.py',336),
  ('condicion -> IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE estatutop RIGHT_CUR_BRACKET falsop','condicion',8,'p_condicion','lexer-parser.py',342),
  ('falsop -> IF_FALSE estatutop RIGHT_CUR_BRACKET','falsop',3,'p_condicion','lexer-parser.py',343),
  ('falsop -> empty','falsop',1,'p_condicion','lexer-parser.py',344),
  ('ciclow -> WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclow',7,'p_ciclow','lexer-parser.py',350),
  ('ciclof -> FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclof',8,'p_ciclof','lexer-parser.py',356),
  ('funcesp -> mean','funcesp',1,'p_funcesp','lexer-parser.py',362),
  ('funcesp -> mode','funcesp',1,'p_funcesp','lexer-parser.py',363),
  ('funcesp -> median','funcesp',1,'p_funcesp','lexer-parser.py',364),
  ('funcesp -> variance','funcesp',1,'p_funcesp','lexer-parser.py',365),
  ('funcesp -> max','funcesp',1,'p_funcesp','lexer-parser.py',366),
  ('funcesp -> min','funcesp',1,'p_funcesp','lexer-parser.py',367),
  ('funcesp -> staddes','funcesp',1,'p_funcesp','lexer-parser.py',368),
  ('funcesp -> boxplot','funcesp',1,'p_funcesp','lexer-parser.py',369),
  ('funcesp -> linreg','funcesp',1,'p_funcesp','lexer-parser.py',370),
  ('mean -> MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mean',5,'p_mean','lexer-parser.py',376),
  ('mode -> MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mode',5,'p_mode','lexer-parser.py',382),
  ('median -> MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','median',5,'p_median','lexer-parser.py',388),
  ('variance -> VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','variance',5,'p_variance','lexer-parser.py',394),
  ('max -> MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON','max',5,'p_max','lexer-parser.py',400),
  ('min -> MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','min',5,'p_min','lexer-parser.py',406),
  ('staddes -> STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON','staddes',5,'p_staddes','lexer-parser.py',412),
  ('boxplot -> BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON','boxplot',5,'p_boxplot','lexer-parser.py',418),
  ('linreg -> LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON','linreg',5,'p_linreg','lexer-parser.py',424),
  ('empty -> <empty>','empty',0,'p_empty','lexer-parser.py',431),
]
