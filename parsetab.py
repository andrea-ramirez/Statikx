
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVAND ARROW ASIGN BOXPLOT CHAR COMMA COMMENT CTEC CTEF CTEI DATAFRAME DIV DO EQUALS FLOAT FOR FUNC GREATER_THAN ID IF IF_FALSE IF_TRUE INT LEFT_CUR_BRACKET LEFT_PARENT LEFT_SQR_BRACKET LESS_THAN LETRERO LINREG MAX MEAN MEDIAN MIN MINUS MODE MULT NOTEQUALS OR PLUS READ READ_FILE RETURNS RIGHT_CUR_BRACKET RIGHT_PARENT RIGHT_SQR_BRACKET SCRIPT SEMICOLON STADDES VAR VARIANCE VOID WHILE WRITE\n    programa : SCRIPT pnCrearDirFunc ID pnScriptFuncDir SEMICOLON varp funcp bloque\n    varp : var varp \n         | empty\n    funcp : func funcp \n          | empty\n    \n    bloque : DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET pnEndScript\n    estatutop : estatuto estatutop \n              | empty\n    \n    tipo_simp : INT pnSaveTypeVar\n              | FLOAT pnSaveTypeVar\n              | CHAR pnSaveTypeVar\n    \n    tipo_comp : DATAFRAME \n              | file\n    \n    copy : READ_FILE pnSaveCopy LEFT_PARENT LETRERO pnCuadCopy RIGHT_PARENT SEMICOLON\n    \n    file : ID\n    \n    variable : ID pnSaveOperandos indexp\n    indexp : LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET \n           | empty\n    indexpp : COMMA exp \n            | empty\n    \n    llamada : ID LEFT_PARENT expp RIGHT_PARENT SEMICOLON\n    expp : exp exppp\n         | empty\n    exppp : COMMA exp exppp\n          | empty\n    \n    var : VAR pnCheckTablaVar v ARROW idp SEMICOLON\n    v : DATAFRAME pnSaveTypeVar\n      | tipo_simp vp\n    vp : LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET \n       | empty\n    vpp : COMMA CTEI \n        | empty\n    idp : ID pnCheckNameTablaVar idpp\n    idpp : COMMA ID pnCheckNameTablaVar idpp\n         | empty\n    \n    func : FUNC returnval ARROW ID pnAddFuncinDir LEFT_PARENT pnCheckTablaVar param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET pnCloseCurrentFunction\n    returnval : tipo_simp \n              | VOID pnSaveTypeVar\n    \n    param : paramlist\n          | empty\n    paramlist : tipoparam ARROW ID pnAddParametersTablaVar paramlistp\n    tipoparam : tipo_simp\n              | DATAFRAME pnSaveTypeVar\n    paramlistp : COMMA paramlist\n               | empty\n    \n    estatuto : asign\n             | llamada\n             | lee\n             | escribe\n             | condicion\n             | ciclow\n             | ciclof\n             | funcesp\n             | return\n             | copy\n    \n    asign : variable ASIGN pnSaveOperadorAsign exp pnCuadAsign SEMICOLON\n    \n    lee : READ pnSaveLeer LEFT_PARENT variable pnCuadLee RIGHT_PARENT SEMICOLON\n    \n    escribe :  WRITE pnSaveEscribe LEFT_PARENT escribep RIGHT_PARENT SEMICOLON\n    escribep : exp pnCuadEscribe\n             | LETRERO pnCuadEscribe\n    \n    return : RETURNS exp SEMICOLON\n    \n    exp : exprel pnCuadOplog logic\n    logic : logicsig exprel pnCuadOplog logic \n          | empty\n    logicsig : AND pnSaveOperadorLog\n             | OR pnSaveOperadorLog\n    \n    exprel : e pnCuadOpRelacional relacionalp\n    relacionalp : relsig e pnCuadOpRelacional relacionalp \n                | empty\n    relsig : LESS_THAN pnSaveOperadorRel\n           | GREATER_THAN pnSaveOperadorRel\n           | EQUALS pnSaveOperadorRel\n           | NOTEQUALS pnSaveOperadorRel\n    \n    e : t pnCuadPlMi tp\n    tp : tsig t pnCuadPlMi tp \n       | empty\n    tsig : PLUS pnSaveOperadorPlMi\n         | MINUS pnSaveOperadorPlMi\n    \n    t : f pnCuadMuDi fp\n    fp : fsig f pnCuadMuDi fp \n       | empty\n    fsig : MULT pnSaveOperadorMuDi\n         | DIV pnSaveOperadorMuDi\n    \n    f : LEFT_PARENT pnSaveFondoFalso exp RIGHT_PARENT pnPopFondoFalso\n      | CTEI pnSaveCteI  pnSaveOperandoConstante\n      | CTEF pnSaveCteF pnSaveOperandoConstante\n      | CTEC pnSaveCteC pnSaveOperandoConstante\n      | variable\n      | llamada\n      | funcesp\n    \n    condicion : IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET falsop\n    falsop : IF_FALSE  LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET \n           | empty\n    \n    ciclow : WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    ciclof : FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    funcesp : mean\n            | mode\n            | median\n            | variance\n            | max\n            | min\n            | staddes\n            | boxplot\n            | linreg\n            | copy\n    \n    mean : MEAN pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    mode : MODE pnSaveFuncEsp LEFT_PARENT variable  pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    median : MEDIAN pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    variance : VARIANCE pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    max : MAX pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    min : MIN pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    staddes : STADDES pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    boxplot : BOXPLOT pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    linreg : LINREG pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON\n    \n    pnCrearDirFunc : empty\n    \n    pnScriptFuncDir : empty\n    \n    pnCheckTablaVar : empty\n    \n    pnSaveTypeVar : empty\n    \n    pnCheckNameTablaVar : empty\n    \n    pnAddFuncinDir : empty\n    \n    pnAddParametersTablaVar : empty\n    \n    pnCloseCurrentFunction : empty\n    \n    pnEndScript : empty\n    \n    pnSaveCteI : empty\n    \n    pnSaveCteF : empty\n    \n    pnSaveCteC : empty\n    \n    pnSaveFondoFalso : empty\n    \n    pnPopFondoFalso : empty\n    \n    pnSaveOperandos : empty\n    \n    pnSaveOperandoConstante : empty\n    \n    pnSaveOperadorPlMi : empty\n    \n    pnSaveOperadorMuDi : empty\n    \n    pnSaveOperadorRel : empty\n    \n    pnSaveOperadorLog : empty\n    \n    pnCuadPlMi : empty\n    \n    pnCuadMuDi : empty\n    \n    pnCuadOpRelacional : empty\n    \n    pnCuadOplog : empty\n    \n    pnSaveOperadorAsign : empty\n    \n    pnCuadAsign : empty\n    \n    pnSaveEscribe : empty\n    \n    pnCuadEscribe : empty\n    \n    pnSaveLeer : empty\n    \n    pnCuadLee : empty\n    \n    pnSaveCopy : empty\n    \n    pnCuadCopy : empty\n    \n    pnSaveFuncEsp : empty\n    \n    pnCuadFuncEsp : empty\n    \n    empty :'
    
_lr_action_items = {'SCRIPT':([0,],[2,]),'$end':([1,20,104,145,146,],[0,-1,-149,-6,-123,]),'ID':([2,3,4,10,11,14,15,17,22,32,33,39,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,100,106,107,114,115,116,122,147,148,153,155,156,159,161,170,171,179,180,181,182,183,184,185,186,187,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,246,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,5,-115,-149,-3,-149,-5,-2,-4,-149,45,47,-149,72,-26,72,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,129,144,-149,129,129,129,160,-149,129,-139,129,160,129,129,-61,129,-127,160,160,160,160,160,160,160,160,160,129,129,-149,-149,129,-149,-149,-149,-149,129,-149,-149,129,-149,-149,297,-21,129,72,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,72,72,72,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,72,-92,]),'SEMICOLON':([5,6,7,46,47,53,54,78,79,80,81,82,83,84,85,86,99,101,108,109,117,118,119,120,121,123,124,125,126,127,128,129,130,144,152,154,162,163,164,165,166,167,168,169,172,173,174,175,176,177,194,195,196,208,210,213,215,220,222,225,227,231,232,233,234,248,249,250,251,258,265,269,275,279,283,300,302,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-149,8,-116,52,-149,-149,-119,-96,-97,-98,-99,-100,-101,-102,-103,-104,-33,-35,-149,-129,161,-149,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-149,-16,-18,-149,-138,-149,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-149,-149,251,-62,-64,-67,-69,-74,-76,-79,-81,-85,-130,-86,-87,-34,298,-140,-21,303,-149,-149,-149,-149,-149,-17,326,-149,-149,-149,-149,-84,-128,334,335,336,337,338,339,340,341,342,343,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'VAR':([8,10,32,52,296,],[12,12,12,-26,12,]),'FUNC':([8,9,10,11,14,17,32,44,52,350,355,356,],[-149,16,-149,-3,16,-2,-149,16,-26,-149,-36,-122,]),'DO':([8,9,10,11,13,14,15,17,22,52,350,355,356,],[-149,-149,-149,-3,21,-149,-5,-2,-4,-26,-149,-36,-122,]),'READ':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,161,251,263,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,73,-26,73,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-21,73,-149,-56,-58,73,73,73,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,73,-92,]),'WRITE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,161,251,263,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,74,-26,74,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-21,74,-149,-56,-58,74,74,74,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,74,-92,]),'IF':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,161,251,263,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,75,-26,75,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-21,75,-149,-56,-58,75,75,75,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,75,-92,]),'WHILE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,161,251,263,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,76,-26,76,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-21,76,-149,-56,-58,76,76,76,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,76,-92,]),'FOR':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,161,251,263,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,77,-26,77,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-21,77,-149,-56,-58,77,77,77,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,77,-92,]),'RETURNS':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,161,251,263,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,87,-26,87,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-21,87,-149,-56,-58,87,87,87,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,87,-92,]),'READ_FILE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,88,-26,88,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,88,-149,88,88,88,-149,88,-139,88,88,88,-61,88,-127,88,88,-149,-149,88,-149,-149,-149,-149,88,-149,-149,88,-149,-149,-21,88,88,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,88,88,88,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,88,-92,]),'MEAN':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,89,-26,89,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,89,-149,89,89,89,-149,89,-139,89,89,89,-61,89,-127,89,89,-149,-149,89,-149,-149,-149,-149,89,-149,-149,89,-149,-149,-21,89,89,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,89,89,89,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,89,-92,]),'MODE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,90,-26,90,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,90,-149,90,90,90,-149,90,-139,90,90,90,-61,90,-127,90,90,-149,-149,90,-149,-149,-149,-149,90,-149,-149,90,-149,-149,-21,90,90,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,90,90,90,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,90,-92,]),'MEDIAN':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,91,-26,91,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,91,-149,91,91,91,-149,91,-139,91,91,91,-61,91,-127,91,91,-149,-149,91,-149,-149,-149,-149,91,-149,-149,91,-149,-149,-21,91,91,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,91,91,91,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,91,-92,]),'VARIANCE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,92,-26,92,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,92,-149,92,92,92,-149,92,-139,92,92,92,-61,92,-127,92,92,-149,-149,92,-149,-149,-149,-149,92,-149,-149,92,-149,-149,-21,92,92,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,92,92,92,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,92,-92,]),'MAX':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,93,-26,93,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,93,-149,93,93,93,-149,93,-139,93,93,93,-61,93,-127,93,93,-149,-149,93,-149,-149,-149,-149,93,-149,-149,93,-149,-149,-21,93,93,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,93,93,93,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,93,-92,]),'MIN':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,94,-26,94,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,94,-149,94,94,94,-149,94,-139,94,94,94,-61,94,-127,94,94,-149,-149,94,-149,-149,-149,-149,94,-149,-149,94,-149,-149,-21,94,94,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,94,94,94,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,94,-92,]),'STADDES':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,95,-26,95,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,95,-149,95,95,95,-149,95,-139,95,95,95,-61,95,-127,95,95,-149,-149,95,-149,-149,-149,-149,95,-149,-149,95,-149,-149,-21,95,95,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,95,95,95,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,95,-92,]),'BOXPLOT':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,96,-26,96,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,96,-149,96,96,96,-149,96,-139,96,96,96,-61,96,-127,96,96,-149,-149,96,-149,-149,-149,-149,96,-149,-149,96,-149,-149,-21,96,96,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,96,96,96,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,96,-92,]),'LINREG':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,114,115,122,147,148,153,156,159,161,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,251,254,263,266,267,268,270,271,272,273,274,276,277,278,280,281,282,296,298,303,304,306,323,326,328,334,335,336,337,338,339,340,341,342,343,348,349,350,352,354,355,356,357,359,],[-149,-3,-149,-5,-2,-4,-149,-149,97,-26,97,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,97,-149,97,97,97,-149,97,-139,97,97,97,-61,97,-127,97,97,-149,-149,97,-149,-149,-149,-149,97,-149,-149,97,-149,-149,-21,97,97,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-149,-56,-58,97,97,97,-57,-94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-149,-95,-149,-91,-93,-36,-122,97,-92,]),'RIGHT_CUR_BRACKET':([10,11,14,15,17,22,32,44,49,52,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,105,161,251,263,296,298,303,304,305,306,323,326,327,328,329,334,335,336,337,338,339,340,341,342,343,344,348,349,350,352,354,355,356,357,358,359,],[-149,-3,-149,-5,-2,-4,-149,-149,-149,-26,104,-149,-8,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-7,-61,-21,-149,-149,-56,-58,-149,328,-149,-149,-57,348,-94,349,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,350,-149,-95,-149,-91,-93,-36,-122,-149,359,-92,]),'DATAFRAME':([12,18,19,98,143,346,],[-149,30,-117,-149,193,193,]),'INT':([12,16,18,19,98,143,346,],[-149,26,26,-117,-149,26,26,]),'FLOAT':([12,16,18,19,98,143,346,],[-149,27,27,-117,-149,27,27,]),'CHAR':([12,16,18,19,98,143,346,],[-149,28,28,-117,-149,28,28,]),'VOID':([16,],[25,]),'RIGHT_PARENT':([19,78,79,80,81,82,83,84,85,86,98,107,108,109,118,119,120,121,123,124,125,126,127,128,129,130,143,149,150,151,152,154,157,158,160,162,163,164,165,166,167,168,169,172,173,174,175,176,177,188,189,190,197,199,201,202,203,204,207,208,210,213,215,220,222,225,227,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,251,252,256,257,259,260,261,265,269,275,279,283,284,285,286,287,288,289,290,291,292,293,294,295,297,299,300,307,308,309,310,311,312,324,325,330,331,332,333,334,335,336,337,338,339,340,341,342,343,345,347,351,],[-117,-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-149,-149,-129,-149,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-149,196,-149,-23,-16,-18,205,206,-149,-149,-138,-149,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,245,-39,-40,-22,-25,-149,258,-149,-149,264,-62,-64,-67,-69,-74,-76,-79,-81,283,-85,-130,-86,-87,-149,-149,-149,-149,-149,-149,-149,-149,-149,-149,-21,-149,302,-144,-59,-142,-60,-149,-149,-149,-149,-149,313,-146,314,-148,315,316,317,318,319,320,321,322,-149,-24,-17,-149,-149,-149,-149,-84,-128,-149,-121,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-41,-45,-44,]),'LEFT_CUR_BRACKET':([21,206,245,262,264,353,],[32,263,296,304,306,357,]),'ARROW':([23,24,25,26,27,28,29,30,31,34,35,36,37,38,40,41,43,102,191,192,193,247,],[33,-37,-149,-149,-149,-149,39,-149,-149,-38,-118,-9,-10,-11,-27,-28,-30,-29,246,-42,-149,-43,]),'LEFT_SQR_BRACKET':([26,27,28,31,35,36,37,38,72,108,109,129,160,],[-149,-149,-149,42,-118,-9,-10,-11,-149,153,-129,-149,-149,]),'CTEI':([42,56,87,106,107,114,115,122,147,148,153,156,159,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,254,266,267,268,270,271,272,273,274,276,277,278,280,281,282,298,],[48,103,123,-149,123,123,123,-149,123,-139,123,123,123,123,-127,123,123,-149,-149,123,-149,-149,-149,-149,123,-149,-149,123,-149,-149,123,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-56,]),'LEFT_PARENT':([45,50,51,72,73,74,75,76,77,87,88,89,90,91,92,93,94,95,96,97,106,107,110,111,112,113,114,115,122,129,131,132,133,134,135,136,137,138,139,140,141,142,147,148,153,156,159,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,254,266,267,268,270,271,272,273,274,276,277,278,280,281,282,298,],[-149,98,-120,107,-149,-149,114,115,116,122,-149,-149,-149,-149,-149,-149,-149,-149,-149,-149,-149,122,155,-143,156,-141,122,122,-149,107,178,-145,179,-147,180,181,182,183,184,185,186,187,122,-139,122,122,122,122,-127,122,122,-149,-149,122,-149,-149,-149,-149,122,-149,-149,122,-149,-149,122,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-56,]),'COMMA':([47,48,53,54,78,79,80,81,82,83,84,85,86,108,109,118,119,120,121,123,124,125,126,127,128,129,130,144,150,152,154,162,163,164,165,166,167,168,169,172,173,174,175,176,177,194,200,208,210,213,215,220,222,225,227,231,232,233,234,251,252,265,269,275,279,283,297,300,307,308,309,310,311,312,324,325,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-149,56,100,-119,-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-149,198,-16,-18,-149,-138,-149,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,100,254,-62,-64,-67,-69,-74,-76,-79,-81,-85,-130,-86,-87,-21,198,-149,-149,-149,-149,-149,-149,-17,-149,-149,-149,-149,-84,-128,346,-121,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'RIGHT_SQR_BRACKET':([48,55,57,78,79,80,81,82,83,84,85,86,103,108,109,118,119,120,121,123,124,125,126,127,128,129,130,152,154,162,163,164,165,166,167,168,169,172,173,174,175,176,177,200,208,210,213,215,220,222,225,227,231,232,233,234,251,253,255,265,269,275,279,283,300,301,307,308,309,310,311,312,330,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-149,102,-32,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-149,-129,-149,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,-149,-138,-149,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-149,-62,-64,-67,-69,-74,-76,-79,-81,-85,-130,-86,-87,-21,300,-20,-149,-149,-149,-149,-149,-17,-19,-149,-149,-149,-149,-84,-128,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'ASIGN':([71,72,108,109,152,154,160,300,],[106,-149,-149,-129,-16,-18,-149,-17,]),'MULT':([78,79,80,81,82,83,84,85,86,108,109,121,123,124,125,126,127,128,129,130,152,154,168,169,172,173,174,175,176,177,231,232,233,234,251,279,283,300,310,311,312,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,228,-136,-149,-124,-149,-125,-149,-126,-85,-130,-86,-87,-21,-149,-149,-17,228,-84,-128,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'DIV':([78,79,80,81,82,83,84,85,86,108,109,121,123,124,125,126,127,128,129,130,152,154,168,169,172,173,174,175,176,177,231,232,233,234,251,279,283,300,310,311,312,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,229,-136,-149,-124,-149,-125,-149,-126,-85,-130,-86,-87,-21,-149,-149,-17,229,-84,-128,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'PLUS':([78,79,80,81,82,83,84,85,86,108,109,120,121,123,124,125,126,127,128,129,130,152,154,166,167,168,169,172,173,174,175,176,177,225,227,231,232,233,234,251,275,279,283,300,309,310,311,312,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,223,-135,-149,-136,-149,-124,-149,-125,-149,-126,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-17,223,-149,-84,-128,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'MINUS':([78,79,80,81,82,83,84,85,86,108,109,120,121,123,124,125,126,127,128,129,130,152,154,166,167,168,169,172,173,174,175,176,177,225,227,231,232,233,234,251,275,279,283,300,309,310,311,312,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,224,-135,-149,-136,-149,-124,-149,-125,-149,-126,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-17,224,-149,-84,-128,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'LESS_THAN':([78,79,80,81,82,83,84,85,86,108,109,119,120,121,123,124,125,126,127,128,129,130,152,154,164,165,166,167,168,169,172,173,174,175,176,177,220,222,225,227,231,232,233,234,251,269,275,279,283,300,308,309,310,311,312,332,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,216,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-74,-76,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-149,-17,216,-149,-149,-84,-128,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'GREATER_THAN':([78,79,80,81,82,83,84,85,86,108,109,119,120,121,123,124,125,126,127,128,129,130,152,154,164,165,166,167,168,169,172,173,174,175,176,177,220,222,225,227,231,232,233,234,251,269,275,279,283,300,308,309,310,311,312,332,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,217,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-74,-76,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-149,-17,217,-149,-149,-84,-128,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'EQUALS':([78,79,80,81,82,83,84,85,86,108,109,119,120,121,123,124,125,126,127,128,129,130,152,154,164,165,166,167,168,169,172,173,174,175,176,177,220,222,225,227,231,232,233,234,251,269,275,279,283,300,308,309,310,311,312,332,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,218,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-74,-76,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-149,-17,218,-149,-149,-84,-128,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'NOTEQUALS':([78,79,80,81,82,83,84,85,86,108,109,119,120,121,123,124,125,126,127,128,129,130,152,154,164,165,166,167,168,169,172,173,174,175,176,177,220,222,225,227,231,232,233,234,251,269,275,279,283,300,308,309,310,311,312,332,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,219,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-74,-76,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-149,-17,219,-149,-149,-84,-128,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'AND':([78,79,80,81,82,83,84,85,86,108,109,118,119,120,121,123,124,125,126,127,128,129,130,152,154,162,163,164,165,166,167,168,169,172,173,174,175,176,177,213,215,220,222,225,227,231,232,233,234,251,265,269,275,279,283,300,307,308,309,310,311,312,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,211,-138,-149,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-67,-69,-74,-76,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-149,-149,-17,211,-149,-149,-149,-84,-128,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'OR':([78,79,80,81,82,83,84,85,86,108,109,118,119,120,121,123,124,125,126,127,128,129,130,152,154,162,163,164,165,166,167,168,169,172,173,174,175,176,177,213,215,220,222,225,227,231,232,233,234,251,265,269,275,279,283,300,307,308,309,310,311,312,331,332,333,334,335,336,337,338,339,340,341,342,343,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-149,-129,-149,-149,-149,-149,-149,-149,-149,-88,-89,-90,-149,-105,-16,-18,212,-138,-149,-137,-149,-135,-149,-136,-149,-124,-149,-125,-149,-126,-67,-69,-74,-76,-79,-81,-85,-130,-86,-87,-21,-149,-149,-149,-149,-149,-17,212,-149,-149,-149,-84,-128,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'CTEF':([87,106,107,114,115,122,147,148,153,156,159,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,254,266,267,268,270,271,272,273,274,276,277,278,280,281,282,298,],[124,-149,124,124,124,-149,124,-139,124,124,124,124,-127,124,124,-149,-149,124,-149,-149,-149,-149,124,-149,-149,124,-149,-149,124,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-56,]),'CTEC':([87,106,107,114,115,122,147,148,153,156,159,170,171,198,209,211,212,214,216,217,218,219,221,223,224,226,228,229,254,266,267,268,270,271,272,273,274,276,277,278,280,281,282,298,],[125,-149,125,125,125,-149,125,-139,125,125,125,125,-127,125,125,-149,-149,125,-149,-149,-149,-149,125,-149,-149,125,-149,-149,125,-65,-134,-66,-70,-133,-71,-72,-73,-77,-131,-78,-82,-132,-83,-56,]),'LETRERO':([156,178,],[204,235,]),'IF_TRUE':([205,],[262,]),'IF_FALSE':([348,],[353,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'pnCrearDirFunc':([2,],[3,]),'empty':([2,5,8,9,10,12,14,25,26,27,28,30,31,32,44,45,47,48,49,53,59,72,73,74,88,89,90,91,92,93,94,95,96,97,98,104,106,107,108,118,119,120,121,122,123,124,125,129,143,144,150,160,162,164,166,168,172,174,176,193,194,195,200,201,203,204,211,212,216,217,218,219,223,224,228,229,235,236,237,238,239,240,241,242,243,244,252,263,265,269,275,279,283,296,297,304,306,307,308,309,310,323,324,348,350,357,],[4,7,11,15,11,19,15,35,35,35,35,35,43,11,15,51,54,57,60,101,60,109,111,113,132,134,134,134,134,134,134,134,134,134,19,146,148,151,154,163,165,167,169,171,173,175,177,109,190,54,199,109,210,215,222,227,232,232,232,35,101,250,255,257,260,260,267,267,271,271,271,271,277,277,281,281,285,287,287,287,287,287,287,287,287,287,199,60,163,165,167,169,312,11,325,60,60,210,215,222,227,60,347,354,356,60,]),'pnScriptFuncDir':([5,],[6,]),'varp':([8,10,32,296,],[9,17,44,323,]),'var':([8,10,32,296,],[10,10,10,10,]),'funcp':([9,14,44,],[13,22,49,]),'func':([9,14,44,],[14,14,14,]),'pnCheckTablaVar':([12,98,],[18,143,]),'bloque':([13,],[20,]),'returnval':([16,],[23,]),'tipo_simp':([16,18,143,346,],[24,31,192,192,]),'v':([18,],[29,]),'pnSaveTypeVar':([25,26,27,28,30,193,],[34,36,37,38,40,247,]),'vp':([31,],[41,]),'idp':([39,],[46,]),'pnAddFuncinDir':([45,],[50,]),'pnCheckNameTablaVar':([47,144,],[53,194,]),'vpp':([48,],[55,]),'estatutop':([49,59,263,304,306,323,357,],[58,105,305,327,329,344,358,]),'estatuto':([49,59,263,304,306,323,357,],[59,59,59,59,59,59,59,]),'asign':([49,59,116,263,304,306,323,357,],[61,61,159,61,61,61,61,61,]),'llamada':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[62,62,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,62,62,62,62,62,]),'lee':([49,59,263,304,306,323,357,],[63,63,63,63,63,63,63,]),'escribe':([49,59,263,304,306,323,357,],[64,64,64,64,64,64,64,]),'condicion':([49,59,263,304,306,323,357,],[65,65,65,65,65,65,65,]),'ciclow':([49,59,263,304,306,323,357,],[66,66,66,66,66,66,66,]),'ciclof':([49,59,263,304,306,323,357,],[67,67,67,67,67,67,67,]),'funcesp':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[68,68,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,68,68,68,68,68,]),'return':([49,59,263,304,306,323,357,],[69,69,69,69,69,69,69,]),'copy':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[70,70,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,70,70,70,70,70,]),'variable':([49,59,87,107,114,115,116,147,153,155,156,159,170,179,180,181,182,183,184,185,186,187,198,209,214,221,226,254,263,304,306,323,357,],[71,71,126,126,126,126,71,126,126,201,126,126,126,236,237,238,239,240,241,242,243,244,126,126,126,126,126,126,71,71,71,71,71,]),'mean':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'mode':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'median':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'variance':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'max':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'min':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'staddes':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'boxplot':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'linreg':([49,59,87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,263,304,306,323,357,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'idpp':([53,194,],[99,248,]),'pnSaveOperandos':([72,129,160,],[108,108,108,]),'pnSaveLeer':([73,],[110,]),'pnSaveEscribe':([74,],[112,]),'exp':([87,107,114,115,147,153,156,159,170,198,254,],[117,150,157,158,195,200,203,207,230,252,301,]),'exprel':([87,107,114,115,147,153,156,159,170,198,209,254,],[118,118,118,118,118,118,118,118,118,118,265,118,]),'e':([87,107,114,115,147,153,156,159,170,198,209,214,254,],[119,119,119,119,119,119,119,119,119,119,119,269,119,]),'t':([87,107,114,115,147,153,156,159,170,198,209,214,221,254,],[120,120,120,120,120,120,120,120,120,120,120,120,275,120,]),'f':([87,107,114,115,147,153,156,159,170,198,209,214,221,226,254,],[121,121,121,121,121,121,121,121,121,121,121,121,121,279,121,]),'pnSaveCopy':([88,],[131,]),'pnSaveFuncEsp':([89,90,91,92,93,94,95,96,97,],[133,135,136,137,138,139,140,141,142,]),'pnEndScript':([104,],[145,]),'pnSaveOperadorAsign':([106,],[147,]),'expp':([107,],[149,]),'indexp':([108,],[152,]),'pnCuadOplog':([118,265,],[162,307,]),'pnCuadOpRelacional':([119,269,],[164,308,]),'pnCuadPlMi':([120,275,],[166,309,]),'pnCuadMuDi':([121,279,],[168,310,]),'pnSaveFondoFalso':([122,],[170,]),'pnSaveCteI':([123,],[172,]),'pnSaveCteF':([124,],[174,]),'pnSaveCteC':([125,],[176,]),'param':([143,],[188,]),'paramlist':([143,346,],[189,351,]),'tipoparam':([143,346,],[191,191,]),'exppp':([150,252,],[197,299,]),'escribep':([156,],[202,]),'logic':([162,307,],[208,330,]),'logicsig':([162,307,],[209,209,]),'relacionalp':([164,308,],[213,331,]),'relsig':([164,308,],[214,214,]),'tp':([166,309,],[220,332,]),'tsig':([166,309,],[221,221,]),'fp':([168,310,],[225,333,]),'fsig':([168,310,],[226,226,]),'pnSaveOperandoConstante':([172,174,176,],[231,233,234,]),'pnCuadAsign':([195,],[249,]),'indexpp':([200,],[253,]),'pnCuadLee':([201,],[256,]),'pnCuadEscribe':([203,204,],[259,261,]),'pnSaveOperadorLog':([211,212,],[266,268,]),'pnSaveOperadorRel':([216,217,218,219,],[270,272,273,274,]),'pnSaveOperadorPlMi':([223,224,],[276,278,]),'pnSaveOperadorMuDi':([228,229,],[280,282,]),'pnCuadCopy':([235,],[284,]),'pnCuadFuncEsp':([236,237,238,239,240,241,242,243,244,],[286,288,289,290,291,292,293,294,295,]),'pnPopFondoFalso':([283,],[311,]),'pnAddParametersTablaVar':([297,],[324,]),'paramlistp':([324,],[345,]),'falsop':([348,],[352,]),'pnCloseCurrentFunction':([350,],[355,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> SCRIPT pnCrearDirFunc ID pnScriptFuncDir SEMICOLON varp funcp bloque','programa',8,'p_programa','lexer-parser.py',188),
  ('varp -> var varp','varp',2,'p_programa','lexer-parser.py',189),
  ('varp -> empty','varp',1,'p_programa','lexer-parser.py',190),
  ('funcp -> func funcp','funcp',2,'p_programa','lexer-parser.py',191),
  ('funcp -> empty','funcp',1,'p_programa','lexer-parser.py',192),
  ('bloque -> DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET pnEndScript','bloque',7,'p_bloque','lexer-parser.py',198),
  ('estatutop -> estatuto estatutop','estatutop',2,'p_bloque','lexer-parser.py',199),
  ('estatutop -> empty','estatutop',1,'p_bloque','lexer-parser.py',200),
  ('tipo_simp -> INT pnSaveTypeVar','tipo_simp',2,'p_tipo_simp','lexer-parser.py',206),
  ('tipo_simp -> FLOAT pnSaveTypeVar','tipo_simp',2,'p_tipo_simp','lexer-parser.py',207),
  ('tipo_simp -> CHAR pnSaveTypeVar','tipo_simp',2,'p_tipo_simp','lexer-parser.py',208),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','lexer-parser.py',214),
  ('tipo_comp -> file','tipo_comp',1,'p_tipo_comp','lexer-parser.py',215),
  ('copy -> READ_FILE pnSaveCopy LEFT_PARENT LETRERO pnCuadCopy RIGHT_PARENT SEMICOLON','copy',7,'p_copy','lexer-parser.py',221),
  ('file -> ID','file',1,'p_file','lexer-parser.py',227),
  ('variable -> ID pnSaveOperandos indexp','variable',3,'p_variable','lexer-parser.py',233),
  ('indexp -> LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET','indexp',4,'p_variable','lexer-parser.py',234),
  ('indexp -> empty','indexp',1,'p_variable','lexer-parser.py',235),
  ('indexpp -> COMMA exp','indexpp',2,'p_variable','lexer-parser.py',236),
  ('indexpp -> empty','indexpp',1,'p_variable','lexer-parser.py',237),
  ('llamada -> ID LEFT_PARENT expp RIGHT_PARENT SEMICOLON','llamada',5,'p_llamada','lexer-parser.py',243),
  ('expp -> exp exppp','expp',2,'p_llamada','lexer-parser.py',244),
  ('expp -> empty','expp',1,'p_llamada','lexer-parser.py',245),
  ('exppp -> COMMA exp exppp','exppp',3,'p_llamada','lexer-parser.py',246),
  ('exppp -> empty','exppp',1,'p_llamada','lexer-parser.py',247),
  ('var -> VAR pnCheckTablaVar v ARROW idp SEMICOLON','var',6,'p_var','lexer-parser.py',253),
  ('v -> DATAFRAME pnSaveTypeVar','v',2,'p_var','lexer-parser.py',254),
  ('v -> tipo_simp vp','v',2,'p_var','lexer-parser.py',255),
  ('vp -> LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET','vp',4,'p_var','lexer-parser.py',256),
  ('vp -> empty','vp',1,'p_var','lexer-parser.py',257),
  ('vpp -> COMMA CTEI','vpp',2,'p_var','lexer-parser.py',258),
  ('vpp -> empty','vpp',1,'p_var','lexer-parser.py',259),
  ('idp -> ID pnCheckNameTablaVar idpp','idp',3,'p_var','lexer-parser.py',260),
  ('idpp -> COMMA ID pnCheckNameTablaVar idpp','idpp',4,'p_var','lexer-parser.py',261),
  ('idpp -> empty','idpp',1,'p_var','lexer-parser.py',262),
  ('func -> FUNC returnval ARROW ID pnAddFuncinDir LEFT_PARENT pnCheckTablaVar param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET pnCloseCurrentFunction','func',14,'p_func','lexer-parser.py',268),
  ('returnval -> tipo_simp','returnval',1,'p_func','lexer-parser.py',269),
  ('returnval -> VOID pnSaveTypeVar','returnval',2,'p_func','lexer-parser.py',270),
  ('param -> paramlist','param',1,'p_param','lexer-parser.py',276),
  ('param -> empty','param',1,'p_param','lexer-parser.py',277),
  ('paramlist -> tipoparam ARROW ID pnAddParametersTablaVar paramlistp','paramlist',5,'p_param','lexer-parser.py',278),
  ('tipoparam -> tipo_simp','tipoparam',1,'p_param','lexer-parser.py',279),
  ('tipoparam -> DATAFRAME pnSaveTypeVar','tipoparam',2,'p_param','lexer-parser.py',280),
  ('paramlistp -> COMMA paramlist','paramlistp',2,'p_param','lexer-parser.py',281),
  ('paramlistp -> empty','paramlistp',1,'p_param','lexer-parser.py',282),
  ('estatuto -> asign','estatuto',1,'p_estatuto','lexer-parser.py',288),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','lexer-parser.py',289),
  ('estatuto -> lee','estatuto',1,'p_estatuto','lexer-parser.py',290),
  ('estatuto -> escribe','estatuto',1,'p_estatuto','lexer-parser.py',291),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexer-parser.py',292),
  ('estatuto -> ciclow','estatuto',1,'p_estatuto','lexer-parser.py',293),
  ('estatuto -> ciclof','estatuto',1,'p_estatuto','lexer-parser.py',294),
  ('estatuto -> funcesp','estatuto',1,'p_estatuto','lexer-parser.py',295),
  ('estatuto -> return','estatuto',1,'p_estatuto','lexer-parser.py',296),
  ('estatuto -> copy','estatuto',1,'p_estatuto','lexer-parser.py',297),
  ('asign -> variable ASIGN pnSaveOperadorAsign exp pnCuadAsign SEMICOLON','asign',6,'p_asign','lexer-parser.py',303),
  ('lee -> READ pnSaveLeer LEFT_PARENT variable pnCuadLee RIGHT_PARENT SEMICOLON','lee',7,'p_lee','lexer-parser.py',309),
  ('escribe -> WRITE pnSaveEscribe LEFT_PARENT escribep RIGHT_PARENT SEMICOLON','escribe',6,'p_escribe','lexer-parser.py',315),
  ('escribep -> exp pnCuadEscribe','escribep',2,'p_escribe','lexer-parser.py',316),
  ('escribep -> LETRERO pnCuadEscribe','escribep',2,'p_escribe','lexer-parser.py',317),
  ('return -> RETURNS exp SEMICOLON','return',3,'p_return','lexer-parser.py',323),
  ('exp -> exprel pnCuadOplog logic','exp',3,'p_exp','lexer-parser.py',329),
  ('logic -> logicsig exprel pnCuadOplog logic','logic',4,'p_exp','lexer-parser.py',330),
  ('logic -> empty','logic',1,'p_exp','lexer-parser.py',331),
  ('logicsig -> AND pnSaveOperadorLog','logicsig',2,'p_exp','lexer-parser.py',332),
  ('logicsig -> OR pnSaveOperadorLog','logicsig',2,'p_exp','lexer-parser.py',333),
  ('exprel -> e pnCuadOpRelacional relacionalp','exprel',3,'p_exprel','lexer-parser.py',339),
  ('relacionalp -> relsig e pnCuadOpRelacional relacionalp','relacionalp',4,'p_exprel','lexer-parser.py',340),
  ('relacionalp -> empty','relacionalp',1,'p_exprel','lexer-parser.py',341),
  ('relsig -> LESS_THAN pnSaveOperadorRel','relsig',2,'p_exprel','lexer-parser.py',342),
  ('relsig -> GREATER_THAN pnSaveOperadorRel','relsig',2,'p_exprel','lexer-parser.py',343),
  ('relsig -> EQUALS pnSaveOperadorRel','relsig',2,'p_exprel','lexer-parser.py',344),
  ('relsig -> NOTEQUALS pnSaveOperadorRel','relsig',2,'p_exprel','lexer-parser.py',345),
  ('e -> t pnCuadPlMi tp','e',3,'p_e','lexer-parser.py',351),
  ('tp -> tsig t pnCuadPlMi tp','tp',4,'p_e','lexer-parser.py',352),
  ('tp -> empty','tp',1,'p_e','lexer-parser.py',353),
  ('tsig -> PLUS pnSaveOperadorPlMi','tsig',2,'p_e','lexer-parser.py',354),
  ('tsig -> MINUS pnSaveOperadorPlMi','tsig',2,'p_e','lexer-parser.py',355),
  ('t -> f pnCuadMuDi fp','t',3,'p_t','lexer-parser.py',361),
  ('fp -> fsig f pnCuadMuDi fp','fp',4,'p_t','lexer-parser.py',362),
  ('fp -> empty','fp',1,'p_t','lexer-parser.py',363),
  ('fsig -> MULT pnSaveOperadorMuDi','fsig',2,'p_t','lexer-parser.py',364),
  ('fsig -> DIV pnSaveOperadorMuDi','fsig',2,'p_t','lexer-parser.py',365),
  ('f -> LEFT_PARENT pnSaveFondoFalso exp RIGHT_PARENT pnPopFondoFalso','f',5,'p_f','lexer-parser.py',371),
  ('f -> CTEI pnSaveCteI pnSaveOperandoConstante','f',3,'p_f','lexer-parser.py',372),
  ('f -> CTEF pnSaveCteF pnSaveOperandoConstante','f',3,'p_f','lexer-parser.py',373),
  ('f -> CTEC pnSaveCteC pnSaveOperandoConstante','f',3,'p_f','lexer-parser.py',374),
  ('f -> variable','f',1,'p_f','lexer-parser.py',375),
  ('f -> llamada','f',1,'p_f','lexer-parser.py',376),
  ('f -> funcesp','f',1,'p_f','lexer-parser.py',377),
  ('condicion -> IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET falsop','condicion',9,'p_condicion','lexer-parser.py',383),
  ('falsop -> IF_FALSE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','falsop',4,'p_condicion','lexer-parser.py',384),
  ('falsop -> empty','falsop',1,'p_condicion','lexer-parser.py',385),
  ('ciclow -> WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclow',7,'p_ciclow','lexer-parser.py',391),
  ('ciclof -> FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclof',8,'p_ciclof','lexer-parser.py',397),
  ('funcesp -> mean','funcesp',1,'p_funcesp','lexer-parser.py',403),
  ('funcesp -> mode','funcesp',1,'p_funcesp','lexer-parser.py',404),
  ('funcesp -> median','funcesp',1,'p_funcesp','lexer-parser.py',405),
  ('funcesp -> variance','funcesp',1,'p_funcesp','lexer-parser.py',406),
  ('funcesp -> max','funcesp',1,'p_funcesp','lexer-parser.py',407),
  ('funcesp -> min','funcesp',1,'p_funcesp','lexer-parser.py',408),
  ('funcesp -> staddes','funcesp',1,'p_funcesp','lexer-parser.py',409),
  ('funcesp -> boxplot','funcesp',1,'p_funcesp','lexer-parser.py',410),
  ('funcesp -> linreg','funcesp',1,'p_funcesp','lexer-parser.py',411),
  ('funcesp -> copy','funcesp',1,'p_funcesp','lexer-parser.py',412),
  ('mean -> MEAN pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','mean',7,'p_mean','lexer-parser.py',418),
  ('mode -> MODE pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','mode',7,'p_mode','lexer-parser.py',424),
  ('median -> MEDIAN pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','median',7,'p_median','lexer-parser.py',430),
  ('variance -> VARIANCE pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','variance',7,'p_variance','lexer-parser.py',436),
  ('max -> MAX pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','max',7,'p_max','lexer-parser.py',442),
  ('min -> MIN pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','min',7,'p_min','lexer-parser.py',448),
  ('staddes -> STADDES pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','staddes',7,'p_staddes','lexer-parser.py',454),
  ('boxplot -> BOXPLOT pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','boxplot',7,'p_boxplot','lexer-parser.py',460),
  ('linreg -> LINREG pnSaveFuncEsp LEFT_PARENT variable pnCuadFuncEsp RIGHT_PARENT SEMICOLON','linreg',7,'p_linreg','lexer-parser.py',466),
  ('pnCrearDirFunc -> empty','pnCrearDirFunc',1,'p_pnCrearDirFunc','lexer-parser.py',476),
  ('pnScriptFuncDir -> empty','pnScriptFuncDir',1,'p_pnScriptFuncDir','lexer-parser.py',486),
  ('pnCheckTablaVar -> empty','pnCheckTablaVar',1,'p_pnCheckTablaVar','lexer-parser.py',495),
  ('pnSaveTypeVar -> empty','pnSaveTypeVar',1,'p_pnSaveTypeVar','lexer-parser.py',503),
  ('pnCheckNameTablaVar -> empty','pnCheckNameTablaVar',1,'p_pnCheckNameTablaVar','lexer-parser.py',512),
  ('pnAddFuncinDir -> empty','pnAddFuncinDir',1,'p_pnAddFuncinDir','lexer-parser.py',519),
  ('pnAddParametersTablaVar -> empty','pnAddParametersTablaVar',1,'p_pnAddParametersTablaVar','lexer-parser.py',533),
  ('pnCloseCurrentFunction -> empty','pnCloseCurrentFunction',1,'p_pnCloseCurrentFunction','lexer-parser.py',541),
  ('pnEndScript -> empty','pnEndScript',1,'p_pnEndScript','lexer-parser.py',550),
  ('pnSaveCteI -> empty','pnSaveCteI',1,'p_pnSaveCteI','lexer-parser.py',558),
  ('pnSaveCteF -> empty','pnSaveCteF',1,'p_pnSaveCteF','lexer-parser.py',565),
  ('pnSaveCteC -> empty','pnSaveCteC',1,'p_pnSaveCteC','lexer-parser.py',572),
  ('pnSaveFondoFalso -> empty','pnSaveFondoFalso',1,'p_pnSaveFondoFalso','lexer-parser.py',579),
  ('pnPopFondoFalso -> empty','pnPopFondoFalso',1,'p_pnPopFondoFalso','lexer-parser.py',587),
  ('pnSaveOperandos -> empty','pnSaveOperandos',1,'p_pnSaveOperandos','lexer-parser.py',597),
  ('pnSaveOperandoConstante -> empty','pnSaveOperandoConstante',1,'p_pnSaveOperandoConstante','lexer-parser.py',613),
  ('pnSaveOperadorPlMi -> empty','pnSaveOperadorPlMi',1,'p_pnSaveOperadorPlMi','lexer-parser.py',621),
  ('pnSaveOperadorMuDi -> empty','pnSaveOperadorMuDi',1,'p_pnSaveOperadorMuDi','lexer-parser.py',628),
  ('pnSaveOperadorRel -> empty','pnSaveOperadorRel',1,'p_pnSaveOperadorRel','lexer-parser.py',635),
  ('pnSaveOperadorLog -> empty','pnSaveOperadorLog',1,'p_pnSaveOperadorLog','lexer-parser.py',642),
  ('pnCuadPlMi -> empty','pnCuadPlMi',1,'p_pnCuadPlMi','lexer-parser.py',649),
  ('pnCuadMuDi -> empty','pnCuadMuDi',1,'p_pnCuadMuDi','lexer-parser.py',683),
  ('pnCuadOpRelacional -> empty','pnCuadOpRelacional',1,'p_pnCuadOpRelacional','lexer-parser.py',717),
  ('pnCuadOplog -> empty','pnCuadOplog',1,'p_pnCuadOplog','lexer-parser.py',752),
  ('pnSaveOperadorAsign -> empty','pnSaveOperadorAsign',1,'p_pnSaveOperadorAsign','lexer-parser.py',785),
  ('pnCuadAsign -> empty','pnCuadAsign',1,'p_pnCuadAsign','lexer-parser.py',792),
  ('pnSaveEscribe -> empty','pnSaveEscribe',1,'p_pnSaveEscribe','lexer-parser.py',818),
  ('pnCuadEscribe -> empty','pnCuadEscribe',1,'p_pnCuadEscribe','lexer-parser.py',825),
  ('pnSaveLeer -> empty','pnSaveLeer',1,'p_pnSaveLeer','lexer-parser.py',862),
  ('pnCuadLee -> empty','pnCuadLee',1,'p_pnCuadLee','lexer-parser.py',869),
  ('pnSaveCopy -> empty','pnSaveCopy',1,'p_pnSaveCopy','lexer-parser.py',890),
  ('pnCuadCopy -> empty','pnCuadCopy',1,'p_pnCuadCopy','lexer-parser.py',897),
  ('pnSaveFuncEsp -> empty','pnSaveFuncEsp',1,'p_pnSaveFuncEsp','lexer-parser.py',920),
  ('pnCuadFuncEsp -> empty','pnCuadFuncEsp',1,'p_pnCuadFuncEsp','lexer-parser.py',927),
  ('empty -> <empty>','empty',0,'p_empty','lexer-parser.py',952),
]
