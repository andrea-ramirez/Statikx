
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVAND ARROW ASIGN BOXPLOT CHAR COMMA COMMENT CTEC CTEF CTEI DATAFRAME DIV DO EQUALS FLOAT FOR FUNC GREATER_THAN ID IF IF_FALSE IF_TRUE INT LEFT_CUR_BRACKET LEFT_PARENT LEFT_SQR_BRACKET LESS_THAN LETRERO LINREG MAX MEAN MEDIAN MIN MINUS MODE MULT NOTEQUALS OR PLUS READ READ_FILE RETURNS RIGHT_CUR_BRACKET RIGHT_PARENT RIGHT_SQR_BRACKET SCRIPT SEMICOLON STADDES VAR VARIANCE VOID WHILE WRITE\n    programa : SCRIPT ID SEMICOLON varp funcp bloque\n    varp : var varp \n         | empty\n    funcp : func funcp \n          | empty\n    \n    bloque : DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET\n    estatutop : estatuto estatutop \n              | empty\n    \n    tipo_simp : INT \n              | FLOAT \n              | CHAR\n    \n    tipo_comp : DATAFRAME \n              | file\n    \n    copy : READ_FILE LEFT_PARENT LETRERO RIGHT_PARENT SEMICOLON\n    \n    file : ID\n    \n    variable : ID indexp\n    indexp : LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET \n           | empty\n    indexpp : COMMA exp \n            | empty\n    \n    llamada : ID LEFT_PARENT exp expp RIGHT_PARENT SEMICOLON\n    expp : COMMA exp expp \n         | empty\n    \n    var : VAR v ARROW idp SEMICOLON\n    v : DATAFRAME \n      | tipo_simp vp\n    vp : LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET \n       | empty\n    vpp : COMMA CTEI \n        | empty\n    idp : ID idpp\n    idpp : COMMA ID idpp\n         | empty\n    \n    func : FUNC returnval ARROW ID LEFT_PARENT param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET\n    returnval : tipo_simp \n              | VOID\n    \n    param : tipo_simp ARROW ID paramp \n          | empty\n    paramp : COMMA param paramp \n           | empty\n    \n    estatuto : asign\n             | llamada\n             | lee\n             | escribe\n             | condicion\n             | ciclow\n             | ciclof\n             | funcesp\n             | return\n             | copy\n    \n    asign : variable ASIGN exp SEMICOLON\n    \n    lee : READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    escribe :  WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON\n    escribep : exp \n             | LETRERO\n    \n    return : RETURNS exp SEMICOLON\n    \n    exp : exprel logic\n    logic : logicsig exprel logic \n          | empty\n    logicsig : AND \n             | OR\n    \n    exprel : e relacionalp\n    relacionalp : relsig e relacionalp \n                | empty\n    relsig : LESS_THAN \n           | GREATER_THAN \n           | EQUALS \n           | NOTEQUALS\n    \n    e : t tp\n    tp : tsig t tp \n       | empty\n    tsig : PLUS \n         | MINUS\n    \n    t : f fp\n    fp : fsig f fp \n       | empty\n    fsig : MULT \n         | DIV\n    \n    f : LEFT_PARENT exp RIGHT_PARENT\n      | CTEI\n      | CTEF\n      | CTEC\n      | variable\n      | llamada\n    \n    condicion : IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE estatutop RIGHT_CUR_BRACKET falsop\n    falsop : IF_FALSE estatutop RIGHT_CUR_BRACKET \n           | empty\n    \n    ciclow : WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    ciclof : FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    funcesp : mean\n            | mode\n            | median\n            | variance\n            | max\n            | min\n            | staddes\n            | boxplot\n            | linreg\n    \n    mean : MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    mode : MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    median : MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    variance : VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    max : MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    min : MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    staddes : STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    boxplot : BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    linreg : LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    empty :'
    
_lr_action_items = {'SCRIPT':([0,],[2,]),'$end':([1,20,93,],[0,-1,-6,]),'ID':([2,6,7,10,11,13,22,26,30,31,35,37,39,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,100,101,102,103,104,110,118,119,120,121,122,123,124,125,126,128,139,140,142,144,145,147,149,150,151,152,154,156,157,159,161,162,174,176,178,181,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[3,-108,-3,-108,-5,-2,-4,33,-108,36,-108,-24,46,63,63,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,116,116,116,116,133,116,116,116,133,116,133,133,133,133,133,133,133,133,133,175,116,-56,116,-60,-61,116,-65,-66,-67,-68,116,-72,-73,116,-77,-78,-108,-51,116,116,63,-52,-53,63,63,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,63,-34,-108,-88,-85,63,-87,-89,-86,]),'SEMICOLON':([3,32,33,38,40,46,92,97,99,105,106,107,108,109,111,112,113,114,115,116,129,141,143,146,148,153,155,158,160,183,184,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,207,209,216,217,218,219,232,],[4,37,-108,-31,-33,-108,-32,-16,-18,140,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,176,-57,-59,-62,-64,-69,-71,-74,-76,211,212,-108,-108,-108,-108,-79,220,221,222,223,224,225,226,227,228,229,232,-17,-58,-63,-70,-75,-21,]),'VAR':([4,6,30,37,174,],[8,8,8,-24,8,]),'FUNC':([4,5,6,7,10,13,30,35,37,237,],[-108,12,-108,-3,12,-2,-108,12,-24,-34,]),'DO':([4,5,6,7,9,10,11,13,22,37,237,],[-108,-108,-108,-3,21,-108,-5,-2,-4,-24,-34,]),'READ':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,64,64,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,64,-52,-53,64,64,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,64,-34,-108,-88,-85,64,-87,-89,-86,]),'WRITE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,65,65,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,65,-52,-53,65,65,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,65,-34,-108,-88,-85,65,-87,-89,-86,]),'IF':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,66,66,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,66,-52,-53,66,66,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,66,-34,-108,-88,-85,66,-87,-89,-86,]),'WHILE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,67,67,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,67,-52,-53,67,67,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,67,-34,-108,-88,-85,67,-87,-89,-86,]),'FOR':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,68,68,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,68,-52,-53,68,68,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,68,-34,-108,-88,-85,68,-87,-89,-86,]),'RETURNS':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,78,78,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,78,-52,-53,78,78,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,78,-34,-108,-88,-85,78,-87,-89,-86,]),'READ_FILE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,79,79,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,79,-52,-53,79,79,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,79,-34,-108,-88,-85,79,-87,-89,-86,]),'MEAN':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,80,80,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,80,-52,-53,80,80,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,80,-34,-108,-88,-85,80,-87,-89,-86,]),'MODE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,81,81,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,81,-52,-53,81,81,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,81,-34,-108,-88,-85,81,-87,-89,-86,]),'MEDIAN':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,82,82,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,82,-52,-53,82,82,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,82,-34,-108,-88,-85,82,-87,-89,-86,]),'VARIANCE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,83,83,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,83,-52,-53,83,83,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,83,-34,-108,-88,-85,83,-87,-89,-86,]),'MAX':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,84,84,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,84,-52,-53,84,84,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,84,-34,-108,-88,-85,84,-87,-89,-86,]),'MIN':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,85,85,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,85,-52,-53,85,85,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,85,-34,-108,-88,-85,85,-87,-89,-86,]),'STADDES':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,86,86,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,86,-52,-53,86,86,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,86,-34,-108,-88,-85,86,-87,-89,-86,]),'BOXPLOT':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,87,87,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,87,-52,-53,87,87,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,87,-34,-108,-88,-85,87,-87,-89,-86,]),'LINREG':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,232,236,237,239,240,242,243,244,245,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,88,88,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-56,-108,-51,88,-52,-53,88,88,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,-21,88,-34,-108,-88,-85,88,-87,-89,-86,]),'RIGHT_CUR_BRACKET':([6,7,10,11,13,22,30,35,37,44,49,50,51,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,94,140,174,176,203,211,212,213,214,220,221,222,223,224,225,226,227,228,229,230,232,234,235,236,237,239,240,241,242,243,244,245,246,247,],[-108,-3,-108,-5,-2,-4,-108,-108,-24,-108,93,-108,-8,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-90,-91,-92,-93,-94,-95,-96,-97,-98,-7,-56,-108,-51,-108,-52,-53,-108,-108,-14,-99,-100,-101,-102,-103,-104,-105,-106,-107,237,-21,239,240,-108,-34,-108,-88,245,-85,-108,-87,-89,247,-86,]),'DATAFRAME':([8,],[15,]),'INT':([8,12,45,205,],[17,17,17,17,]),'FLOAT':([8,12,45,205,],[18,18,18,18,]),'CHAR':([8,12,45,205,],[19,19,19,19,]),'VOID':([12,],[25,]),'ARROW':([14,15,16,17,18,19,23,24,25,27,29,47,90,],[26,-25,-108,-9,-10,-11,31,-35,-36,-26,-28,-27,128,]),'LEFT_SQR_BRACKET':([16,17,18,19,63,116,133,],[28,-9,-10,-11,98,98,98,]),'LEFT_CUR_BRACKET':([21,127,186,215,],[30,174,214,236,]),'CTEI':([28,42,78,95,96,98,101,102,103,110,139,142,144,145,147,149,150,151,152,154,156,157,159,161,162,176,178,181,],[34,48,111,111,111,111,111,111,111,111,111,111,-60,-61,111,-65,-66,-67,-68,111,-72,-73,111,-77,-78,-51,111,111,]),'COMMA':([33,34,46,91,97,99,106,107,108,109,111,112,113,114,115,116,130,131,141,143,146,148,153,155,158,160,175,188,189,190,191,192,204,205,206,208,209,216,217,218,219,231,232,238,],[39,42,39,-38,-16,-18,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,178,181,-57,-59,-62,-64,-69,-71,-74,-76,205,-108,-108,-108,-108,-79,-37,-108,-40,178,-17,-58,-63,-70,-75,205,-21,-39,]),'RIGHT_SQR_BRACKET':([34,41,43,48,97,99,106,107,108,109,111,112,113,114,115,116,131,141,143,146,148,153,155,158,160,180,182,188,189,190,191,192,209,210,216,217,218,219,232,],[-108,47,-30,-29,-16,-18,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,-108,-57,-59,-62,-64,-69,-71,-74,-76,209,-20,-108,-108,-108,-108,-79,-17,-19,-58,-63,-70,-75,-21,]),'LEFT_PARENT':([36,63,64,65,66,67,68,78,79,80,81,82,83,84,85,86,87,88,95,96,98,101,102,103,110,116,139,142,144,145,147,149,150,151,152,154,156,157,159,161,162,176,178,181,],[45,96,100,101,102,103,104,110,117,118,119,120,121,122,123,124,125,126,110,110,110,110,110,110,110,96,110,110,-60,-61,110,-65,-66,-67,-68,110,-72,-73,110,-77,-78,-51,110,110,]),'RIGHT_PARENT':([45,89,91,97,99,106,107,108,109,111,112,113,114,115,116,130,132,133,134,135,136,137,138,141,143,146,148,153,155,158,160,163,164,165,166,167,168,169,170,171,172,173,175,177,179,187,188,189,190,191,192,204,205,206,208,209,216,217,218,219,231,232,233,238,],[-108,127,-38,-16,-18,-108,-108,-108,-108,-80,-81,-82,-83,-84,-108,-108,183,-108,184,-54,-55,185,186,-57,-59,-62,-64,-69,-71,-74,-76,192,193,194,195,196,197,198,199,200,201,202,-108,207,-23,215,-108,-108,-108,-108,-79,-37,-108,-40,-108,-17,-58,-63,-70,-75,-108,-21,-22,-39,]),'ASIGN':([62,63,97,99,133,209,],[95,-108,-16,-18,-108,-17,]),'CTEF':([78,95,96,98,101,102,103,110,139,142,144,145,147,149,150,151,152,154,156,157,159,161,162,176,178,181,],[112,112,112,112,112,112,112,112,112,112,-60,-61,112,-65,-66,-67,-68,112,-72,-73,112,-77,-78,-51,112,112,]),'CTEC':([78,95,96,98,101,102,103,110,139,142,144,145,147,149,150,151,152,154,156,157,159,161,162,176,178,181,],[113,113,113,113,113,113,113,113,113,113,-60,-61,113,-65,-66,-67,-68,113,-72,-73,113,-77,-78,-51,113,113,]),'MULT':([97,99,109,111,112,113,114,115,116,191,192,209,232,],[-16,-18,161,-80,-81,-82,-83,-84,-108,161,-79,-17,-21,]),'DIV':([97,99,109,111,112,113,114,115,116,191,192,209,232,],[-16,-18,162,-80,-81,-82,-83,-84,-108,162,-79,-17,-21,]),'PLUS':([97,99,108,109,111,112,113,114,115,116,158,160,190,191,192,209,219,232,],[-16,-18,156,-108,-80,-81,-82,-83,-84,-108,-74,-76,156,-108,-79,-17,-75,-21,]),'MINUS':([97,99,108,109,111,112,113,114,115,116,158,160,190,191,192,209,219,232,],[-16,-18,157,-108,-80,-81,-82,-83,-84,-108,-74,-76,157,-108,-79,-17,-75,-21,]),'LESS_THAN':([97,99,107,108,109,111,112,113,114,115,116,153,155,158,160,189,190,191,192,209,218,219,232,],[-16,-18,149,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,149,-108,-108,-79,-17,-70,-75,-21,]),'GREATER_THAN':([97,99,107,108,109,111,112,113,114,115,116,153,155,158,160,189,190,191,192,209,218,219,232,],[-16,-18,150,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,150,-108,-108,-79,-17,-70,-75,-21,]),'EQUALS':([97,99,107,108,109,111,112,113,114,115,116,153,155,158,160,189,190,191,192,209,218,219,232,],[-16,-18,151,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,151,-108,-108,-79,-17,-70,-75,-21,]),'NOTEQUALS':([97,99,107,108,109,111,112,113,114,115,116,153,155,158,160,189,190,191,192,209,218,219,232,],[-16,-18,152,-108,-108,-80,-81,-82,-83,-84,-108,-69,-71,-74,-76,152,-108,-108,-79,-17,-70,-75,-21,]),'AND':([97,99,106,107,108,109,111,112,113,114,115,116,146,148,153,155,158,160,188,189,190,191,192,209,217,218,219,232,],[-16,-18,144,-108,-108,-108,-80,-81,-82,-83,-84,-108,-62,-64,-69,-71,-74,-76,144,-108,-108,-108,-79,-17,-63,-70,-75,-21,]),'OR':([97,99,106,107,108,109,111,112,113,114,115,116,146,148,153,155,158,160,188,189,190,191,192,209,217,218,219,232,],[-16,-18,145,-108,-108,-108,-80,-81,-82,-83,-84,-108,-62,-64,-69,-71,-74,-76,145,-108,-108,-108,-79,-17,-63,-70,-75,-21,]),'LETRERO':([101,117,],[136,164,]),'IF_TRUE':([185,],[213,]),'IF_FALSE':([239,],[243,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'varp':([4,6,30,174,],[5,13,35,203,]),'var':([4,6,30,174,],[6,6,6,6,]),'empty':([4,5,6,10,16,30,33,34,35,44,45,46,50,63,106,107,108,109,116,130,131,133,174,175,188,189,190,191,203,205,208,213,214,231,236,239,243,],[7,11,7,11,29,7,40,43,11,51,91,40,51,99,143,148,155,160,99,179,182,99,7,206,143,148,155,160,51,91,179,51,51,206,51,244,51,]),'funcp':([5,10,35,],[9,22,44,]),'func':([5,10,35,],[10,10,10,]),'v':([8,],[14,]),'tipo_simp':([8,12,45,205,],[16,24,90,90,]),'bloque':([9,],[20,]),'returnval':([12,],[23,]),'vp':([16,],[27,]),'idp':([26,],[32,]),'idpp':([33,46,],[38,92,]),'vpp':([34,],[41,]),'estatutop':([44,50,203,213,214,236,243,],[49,94,230,234,235,241,246,]),'estatuto':([44,50,203,213,214,236,243,],[50,50,50,50,50,50,50,]),'asign':([44,50,104,203,213,214,236,243,],[52,52,139,52,52,52,52,52,]),'llamada':([44,50,78,95,96,98,101,102,103,110,139,142,147,154,159,178,181,203,213,214,236,243,],[53,53,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,53,53,53,53,53,]),'lee':([44,50,203,213,214,236,243,],[54,54,54,54,54,54,54,]),'escribe':([44,50,203,213,214,236,243,],[55,55,55,55,55,55,55,]),'condicion':([44,50,203,213,214,236,243,],[56,56,56,56,56,56,56,]),'ciclow':([44,50,203,213,214,236,243,],[57,57,57,57,57,57,57,]),'ciclof':([44,50,203,213,214,236,243,],[58,58,58,58,58,58,58,]),'funcesp':([44,50,203,213,214,236,243,],[59,59,59,59,59,59,59,]),'return':([44,50,203,213,214,236,243,],[60,60,60,60,60,60,60,]),'copy':([44,50,203,213,214,236,243,],[61,61,61,61,61,61,61,]),'variable':([44,50,78,95,96,98,100,101,102,103,104,110,118,119,120,121,122,123,124,125,126,139,142,147,154,159,178,181,203,213,214,236,243,],[62,62,114,114,114,114,132,114,114,114,62,114,165,166,167,168,169,170,171,172,173,114,114,114,114,114,114,114,62,62,62,62,62,]),'mean':([44,50,203,213,214,236,243,],[69,69,69,69,69,69,69,]),'mode':([44,50,203,213,214,236,243,],[70,70,70,70,70,70,70,]),'median':([44,50,203,213,214,236,243,],[71,71,71,71,71,71,71,]),'variance':([44,50,203,213,214,236,243,],[72,72,72,72,72,72,72,]),'max':([44,50,203,213,214,236,243,],[73,73,73,73,73,73,73,]),'min':([44,50,203,213,214,236,243,],[74,74,74,74,74,74,74,]),'staddes':([44,50,203,213,214,236,243,],[75,75,75,75,75,75,75,]),'boxplot':([44,50,203,213,214,236,243,],[76,76,76,76,76,76,76,]),'linreg':([44,50,203,213,214,236,243,],[77,77,77,77,77,77,77,]),'param':([45,205,],[89,231,]),'indexp':([63,116,133,],[97,97,97,]),'exp':([78,95,96,98,101,102,103,110,139,178,181,],[105,129,130,131,135,137,138,163,187,208,210,]),'exprel':([78,95,96,98,101,102,103,110,139,142,178,181,],[106,106,106,106,106,106,106,106,106,188,106,106,]),'e':([78,95,96,98,101,102,103,110,139,142,147,178,181,],[107,107,107,107,107,107,107,107,107,107,189,107,107,]),'t':([78,95,96,98,101,102,103,110,139,142,147,154,178,181,],[108,108,108,108,108,108,108,108,108,108,108,190,108,108,]),'f':([78,95,96,98,101,102,103,110,139,142,147,154,159,178,181,],[109,109,109,109,109,109,109,109,109,109,109,109,191,109,109,]),'escribep':([101,],[134,]),'logic':([106,188,],[141,216,]),'logicsig':([106,188,],[142,142,]),'relacionalp':([107,189,],[146,217,]),'relsig':([107,189,],[147,147,]),'tp':([108,190,],[153,218,]),'tsig':([108,190,],[154,154,]),'fp':([109,191,],[158,219,]),'fsig':([109,191,],[159,159,]),'expp':([130,208,],[177,233,]),'indexpp':([131,],[180,]),'paramp':([175,231,],[204,238,]),'falsop':([239,],[242,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> SCRIPT ID SEMICOLON varp funcp bloque','programa',6,'p_programa','lexer-parser.py',180),
  ('varp -> var varp','varp',2,'p_programa','lexer-parser.py',181),
  ('varp -> empty','varp',1,'p_programa','lexer-parser.py',182),
  ('funcp -> func funcp','funcp',2,'p_programa','lexer-parser.py',183),
  ('funcp -> empty','funcp',1,'p_programa','lexer-parser.py',184),
  ('bloque -> DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET','bloque',6,'p_bloque','lexer-parser.py',190),
  ('estatutop -> estatuto estatutop','estatutop',2,'p_bloque','lexer-parser.py',191),
  ('estatutop -> empty','estatutop',1,'p_bloque','lexer-parser.py',192),
  ('tipo_simp -> INT','tipo_simp',1,'p_tipo_simp','lexer-parser.py',198),
  ('tipo_simp -> FLOAT','tipo_simp',1,'p_tipo_simp','lexer-parser.py',199),
  ('tipo_simp -> CHAR','tipo_simp',1,'p_tipo_simp','lexer-parser.py',200),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','lexer-parser.py',206),
  ('tipo_comp -> file','tipo_comp',1,'p_tipo_comp','lexer-parser.py',207),
  ('copy -> READ_FILE LEFT_PARENT LETRERO RIGHT_PARENT SEMICOLON','copy',5,'p_copy','lexer-parser.py',213),
  ('file -> ID','file',1,'p_file','lexer-parser.py',219),
  ('variable -> ID indexp','variable',2,'p_variable','lexer-parser.py',225),
  ('indexp -> LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET','indexp',4,'p_variable','lexer-parser.py',226),
  ('indexp -> empty','indexp',1,'p_variable','lexer-parser.py',227),
  ('indexpp -> COMMA exp','indexpp',2,'p_variable','lexer-parser.py',228),
  ('indexpp -> empty','indexpp',1,'p_variable','lexer-parser.py',229),
  ('llamada -> ID LEFT_PARENT exp expp RIGHT_PARENT SEMICOLON','llamada',6,'p_llamada','lexer-parser.py',235),
  ('expp -> COMMA exp expp','expp',3,'p_llamada','lexer-parser.py',236),
  ('expp -> empty','expp',1,'p_llamada','lexer-parser.py',237),
  ('var -> VAR v ARROW idp SEMICOLON','var',5,'p_var','lexer-parser.py',243),
  ('v -> DATAFRAME','v',1,'p_var','lexer-parser.py',244),
  ('v -> tipo_simp vp','v',2,'p_var','lexer-parser.py',245),
  ('vp -> LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET','vp',4,'p_var','lexer-parser.py',246),
  ('vp -> empty','vp',1,'p_var','lexer-parser.py',247),
  ('vpp -> COMMA CTEI','vpp',2,'p_var','lexer-parser.py',248),
  ('vpp -> empty','vpp',1,'p_var','lexer-parser.py',249),
  ('idp -> ID idpp','idp',2,'p_var','lexer-parser.py',250),
  ('idpp -> COMMA ID idpp','idpp',3,'p_var','lexer-parser.py',251),
  ('idpp -> empty','idpp',1,'p_var','lexer-parser.py',252),
  ('func -> FUNC returnval ARROW ID LEFT_PARENT param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET','func',11,'p_func','lexer-parser.py',258),
  ('returnval -> tipo_simp','returnval',1,'p_func','lexer-parser.py',259),
  ('returnval -> VOID','returnval',1,'p_func','lexer-parser.py',260),
  ('param -> tipo_simp ARROW ID paramp','param',4,'p_param','lexer-parser.py',266),
  ('param -> empty','param',1,'p_param','lexer-parser.py',267),
  ('paramp -> COMMA param paramp','paramp',3,'p_param','lexer-parser.py',268),
  ('paramp -> empty','paramp',1,'p_param','lexer-parser.py',269),
  ('estatuto -> asign','estatuto',1,'p_estatuto','lexer-parser.py',275),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','lexer-parser.py',276),
  ('estatuto -> lee','estatuto',1,'p_estatuto','lexer-parser.py',277),
  ('estatuto -> escribe','estatuto',1,'p_estatuto','lexer-parser.py',278),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexer-parser.py',279),
  ('estatuto -> ciclow','estatuto',1,'p_estatuto','lexer-parser.py',280),
  ('estatuto -> ciclof','estatuto',1,'p_estatuto','lexer-parser.py',281),
  ('estatuto -> funcesp','estatuto',1,'p_estatuto','lexer-parser.py',282),
  ('estatuto -> return','estatuto',1,'p_estatuto','lexer-parser.py',283),
  ('estatuto -> copy','estatuto',1,'p_estatuto','lexer-parser.py',284),
  ('asign -> variable ASIGN exp SEMICOLON','asign',4,'p_asign','lexer-parser.py',290),
  ('lee -> READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON','lee',5,'p_lee','lexer-parser.py',296),
  ('escribe -> WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON','escribe',5,'p_escribe','lexer-parser.py',302),
  ('escribep -> exp','escribep',1,'p_escribe','lexer-parser.py',303),
  ('escribep -> LETRERO','escribep',1,'p_escribe','lexer-parser.py',304),
  ('return -> RETURNS exp SEMICOLON','return',3,'p_return','lexer-parser.py',310),
  ('exp -> exprel logic','exp',2,'p_exp','lexer-parser.py',316),
  ('logic -> logicsig exprel logic','logic',3,'p_exp','lexer-parser.py',317),
  ('logic -> empty','logic',1,'p_exp','lexer-parser.py',318),
  ('logicsig -> AND','logicsig',1,'p_exp','lexer-parser.py',319),
  ('logicsig -> OR','logicsig',1,'p_exp','lexer-parser.py',320),
  ('exprel -> e relacionalp','exprel',2,'p_exprel','lexer-parser.py',326),
  ('relacionalp -> relsig e relacionalp','relacionalp',3,'p_exprel','lexer-parser.py',327),
  ('relacionalp -> empty','relacionalp',1,'p_exprel','lexer-parser.py',328),
  ('relsig -> LESS_THAN','relsig',1,'p_exprel','lexer-parser.py',329),
  ('relsig -> GREATER_THAN','relsig',1,'p_exprel','lexer-parser.py',330),
  ('relsig -> EQUALS','relsig',1,'p_exprel','lexer-parser.py',331),
  ('relsig -> NOTEQUALS','relsig',1,'p_exprel','lexer-parser.py',332),
  ('e -> t tp','e',2,'p_e','lexer-parser.py',338),
  ('tp -> tsig t tp','tp',3,'p_e','lexer-parser.py',339),
  ('tp -> empty','tp',1,'p_e','lexer-parser.py',340),
  ('tsig -> PLUS','tsig',1,'p_e','lexer-parser.py',341),
  ('tsig -> MINUS','tsig',1,'p_e','lexer-parser.py',342),
  ('t -> f fp','t',2,'p_t','lexer-parser.py',348),
  ('fp -> fsig f fp','fp',3,'p_t','lexer-parser.py',349),
  ('fp -> empty','fp',1,'p_t','lexer-parser.py',350),
  ('fsig -> MULT','fsig',1,'p_t','lexer-parser.py',351),
  ('fsig -> DIV','fsig',1,'p_t','lexer-parser.py',352),
  ('f -> LEFT_PARENT exp RIGHT_PARENT','f',3,'p_f','lexer-parser.py',358),
  ('f -> CTEI','f',1,'p_f','lexer-parser.py',359),
  ('f -> CTEF','f',1,'p_f','lexer-parser.py',360),
  ('f -> CTEC','f',1,'p_f','lexer-parser.py',361),
  ('f -> variable','f',1,'p_f','lexer-parser.py',362),
  ('f -> llamada','f',1,'p_f','lexer-parser.py',363),
  ('condicion -> IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE estatutop RIGHT_CUR_BRACKET falsop','condicion',8,'p_condicion','lexer-parser.py',369),
  ('falsop -> IF_FALSE estatutop RIGHT_CUR_BRACKET','falsop',3,'p_condicion','lexer-parser.py',370),
  ('falsop -> empty','falsop',1,'p_condicion','lexer-parser.py',371),
  ('ciclow -> WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclow',7,'p_ciclow','lexer-parser.py',377),
  ('ciclof -> FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclof',8,'p_ciclof','lexer-parser.py',383),
  ('funcesp -> mean','funcesp',1,'p_funcesp','lexer-parser.py',389),
  ('funcesp -> mode','funcesp',1,'p_funcesp','lexer-parser.py',390),
  ('funcesp -> median','funcesp',1,'p_funcesp','lexer-parser.py',391),
  ('funcesp -> variance','funcesp',1,'p_funcesp','lexer-parser.py',392),
  ('funcesp -> max','funcesp',1,'p_funcesp','lexer-parser.py',393),
  ('funcesp -> min','funcesp',1,'p_funcesp','lexer-parser.py',394),
  ('funcesp -> staddes','funcesp',1,'p_funcesp','lexer-parser.py',395),
  ('funcesp -> boxplot','funcesp',1,'p_funcesp','lexer-parser.py',396),
  ('funcesp -> linreg','funcesp',1,'p_funcesp','lexer-parser.py',397),
  ('mean -> MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mean',5,'p_mean','lexer-parser.py',403),
  ('mode -> MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mode',5,'p_mode','lexer-parser.py',409),
  ('median -> MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','median',5,'p_median','lexer-parser.py',415),
  ('variance -> VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','variance',5,'p_variance','lexer-parser.py',421),
  ('max -> MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON','max',5,'p_max','lexer-parser.py',427),
  ('min -> MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','min',5,'p_min','lexer-parser.py',433),
  ('staddes -> STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON','staddes',5,'p_staddes','lexer-parser.py',439),
  ('boxplot -> BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON','boxplot',5,'p_boxplot','lexer-parser.py',445),
  ('linreg -> LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON','linreg',5,'p_linreg','lexer-parser.py',451),
  ('empty -> <empty>','empty',0,'p_empty','lexer-parser.py',457),
]
