
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVAND ARROW ASIGN BOXPLOT CHAR COMMA COMMENT CTEC CTEF CTEI DATAFRAME DIV DO EQUALS FLOAT FOR FUNC GREATER_THAN ID IF IF_FALSE IF_TRUE INT LEFT_CUR_BRACKET LEFT_PARENT LEFT_SQR_BRACKET LESS_THAN LETRERO LINREG MAX MEAN MEDIAN MIN MINUS MODE MULT NOTEQUALS OR PLUS READ READ_FILE RETURNS RIGHT_CUR_BRACKET RIGHT_PARENT RIGHT_SQR_BRACKET SCRIPT SEMICOLON STADDES VAR VARIANCE VOID WHILE WRITE\n    programa : SCRIPT ID SEMICOLON varp funcp bloque\n    varp : var varp \n         | empty\n    funcp : func funcp \n          | empty\n    \n    bloque : DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET\n    estatutop : estatuto estatutop \n              | empty\n    \n    tipo_simp : INT \n              | FLOAT \n              | CHAR\n    \n    tipo_comp : DATAFRAME \n              | file\n    \n    copy : READ_FILE LEFT_PARENT LETRERO RIGHT_PARENT SEMICOLON\n    \n    file : ID\n    \n    variable : ID indexp\n    indexp : LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET \n           | empty\n    indexpp : COMMA exp \n            | empty\n    \n    llamada : ID LEFT_PARENT expp RIGHT_PARENT SEMICOLON\n    expp : exp exppp\n         | empty\n    exppp : COMMA exp exppp\n          | empty\n    \n    var : VAR v ARROW idp SEMICOLON\n    v : DATAFRAME \n      | tipo_simp vp\n    vp : LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET \n       | empty\n    vpp : COMMA CTEI \n        | empty\n    idp : ID idpp\n    idpp : COMMA ID idpp\n         | empty\n    \n    func : FUNC returnval ARROW ID LEFT_PARENT param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET\n    returnval : tipo_simp \n              | VOID\n    \n    param : tipo_simp ARROW ID paramp \n          | empty\n    paramp : COMMA param paramp \n           | empty\n    \n    estatuto : asign\n             | llamada\n             | lee\n             | escribe\n             | condicion\n             | ciclow\n             | ciclof\n             | funcesp\n             | return\n             | copy\n    \n    asign : variable ASIGN exp SEMICOLON\n    \n    lee : READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    escribe :  WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON\n    escribep : exp \n             | LETRERO\n    \n    return : RETURNS exp SEMICOLON\n    \n    exp : exprel logic\n    logic : logicsig exprel logic \n          | empty\n    logicsig : AND \n             | OR\n    \n    exprel : e relacionalp\n    relacionalp : relsig e relacionalp \n                | empty\n    relsig : LESS_THAN \n           | GREATER_THAN \n           | EQUALS \n           | NOTEQUALS\n    \n    e : t tp\n    tp : tsig t tp \n       | empty\n    tsig : PLUS \n         | MINUS\n    \n    t : f fp\n    fp : fsig f fp \n       | empty\n    fsig : MULT \n         | DIV\n    \n    f : LEFT_PARENT exp RIGHT_PARENT\n      | CTEI\n      | CTEF\n      | CTEC\n      | variable\n      | llamada\n      | funcesp\n    \n    condicion : IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET falsop\n    falsop : IF_FALSE  LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET \n           | empty\n    \n    ciclow : WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    ciclof : FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    funcesp : mean\n            | mode\n            | median\n            | variance\n            | max\n            | min\n            | staddes\n            | boxplot\n            | linreg\n            | copy\n    \n    mean : MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    mode : MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    median : MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    variance : VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    max : MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    min : MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    staddes : STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    boxplot : BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    linreg : LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    empty :'
    
_lr_action_items = {'SCRIPT':([0,],[2,]),'$end':([1,20,93,],[0,-1,-6,]),'ID':([2,6,7,10,11,13,22,26,30,31,35,37,39,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,100,101,102,103,104,110,120,121,122,123,124,125,126,127,128,130,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[3,-112,-3,-112,-5,-2,-4,33,-112,36,-112,-26,46,63,63,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,117,117,117,117,137,117,117,117,137,117,137,137,137,137,137,137,137,137,137,179,117,-58,117,-62,-63,117,-67,-68,-69,-70,117,-74,-75,117,-79,-80,-112,-53,117,117,63,-21,-54,-55,63,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,63,63,-36,-91,-112,-92,-88,-90,63,-89,]),'SEMICOLON':([3,32,33,38,40,46,69,70,71,72,73,74,75,76,77,92,97,99,105,106,107,108,109,111,112,113,114,115,116,117,118,131,145,147,150,152,157,159,162,164,181,188,189,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,212,214,221,222,223,224,225,226,227,228,229,230,231,232,233,234,],[4,37,-112,-33,-35,-112,-93,-94,-95,-96,-97,-98,-99,-100,-101,-34,-16,-18,144,-112,-112,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,180,-59,-61,-64,-66,-71,-73,-76,-78,212,216,217,-112,-112,-112,-112,-81,225,226,227,228,229,230,231,232,233,234,-21,-17,-60,-65,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'VAR':([4,6,30,37,178,],[8,8,8,-26,8,]),'FUNC':([4,5,6,7,10,13,30,35,37,241,],[-112,12,-112,-3,12,-2,-112,12,-26,-36,]),'DO':([4,5,6,7,9,10,11,13,22,37,241,],[-112,-112,-112,-3,21,-112,-5,-2,-4,-26,-36,]),'READ':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,144,178,180,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,64,64,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-112,-53,64,-21,-54,-55,64,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,64,64,-36,-91,-112,-92,-88,-90,64,-89,]),'WRITE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,144,178,180,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,65,65,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-112,-53,65,-21,-54,-55,65,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,65,65,-36,-91,-112,-92,-88,-90,65,-89,]),'IF':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,144,178,180,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,66,66,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-112,-53,66,-21,-54,-55,66,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,66,66,-36,-91,-112,-92,-88,-90,66,-89,]),'WHILE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,144,178,180,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,67,67,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-112,-53,67,-21,-54,-55,67,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,67,67,-36,-91,-112,-92,-88,-90,67,-89,]),'FOR':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,144,178,180,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,68,68,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-112,-53,68,-21,-54,-55,68,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,68,68,-36,-91,-112,-92,-88,-90,68,-89,]),'RETURNS':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,144,178,180,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,78,78,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-112,-53,78,-21,-54,-55,78,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,78,78,-36,-91,-112,-92,-88,-90,78,-89,]),'READ_FILE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,79,79,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,79,79,79,79,79,79,79,79,79,-58,79,-62,-63,79,-67,-68,-69,-70,79,-74,-75,79,-79,-80,-112,-53,79,79,79,-21,-54,-55,79,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,79,79,-36,-91,-112,-92,-88,-90,79,-89,]),'MEAN':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,80,80,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,80,80,80,80,80,80,80,80,80,-58,80,-62,-63,80,-67,-68,-69,-70,80,-74,-75,80,-79,-80,-112,-53,80,80,80,-21,-54,-55,80,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,80,80,-36,-91,-112,-92,-88,-90,80,-89,]),'MODE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,81,81,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,81,81,81,81,81,81,81,81,81,-58,81,-62,-63,81,-67,-68,-69,-70,81,-74,-75,81,-79,-80,-112,-53,81,81,81,-21,-54,-55,81,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,81,81,-36,-91,-112,-92,-88,-90,81,-89,]),'MEDIAN':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,82,82,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,82,82,82,82,82,82,82,82,82,-58,82,-62,-63,82,-67,-68,-69,-70,82,-74,-75,82,-79,-80,-112,-53,82,82,82,-21,-54,-55,82,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,82,82,-36,-91,-112,-92,-88,-90,82,-89,]),'VARIANCE':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,83,83,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,83,83,83,83,83,83,83,83,83,-58,83,-62,-63,83,-67,-68,-69,-70,83,-74,-75,83,-79,-80,-112,-53,83,83,83,-21,-54,-55,83,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,83,83,-36,-91,-112,-92,-88,-90,83,-89,]),'MAX':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,84,84,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,84,84,84,84,84,84,84,84,84,-58,84,-62,-63,84,-67,-68,-69,-70,84,-74,-75,84,-79,-80,-112,-53,84,84,84,-21,-54,-55,84,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,84,84,-36,-91,-112,-92,-88,-90,84,-89,]),'MIN':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,85,85,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,85,85,85,85,85,85,85,85,85,-58,85,-62,-63,85,-67,-68,-69,-70,85,-74,-75,85,-79,-80,-112,-53,85,85,85,-21,-54,-55,85,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,85,85,-36,-91,-112,-92,-88,-90,85,-89,]),'STADDES':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,86,86,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,86,86,86,86,86,86,86,86,86,-58,86,-62,-63,86,-67,-68,-69,-70,86,-74,-75,86,-79,-80,-112,-53,86,86,86,-21,-54,-55,86,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,86,86,-36,-91,-112,-92,-88,-90,86,-89,]),'BOXPLOT':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,87,87,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,87,87,87,87,87,87,87,87,87,-58,87,-62,-63,87,-67,-68,-69,-70,87,-74,-75,87,-79,-80,-112,-53,87,87,87,-21,-54,-55,87,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,87,87,-36,-91,-112,-92,-88,-90,87,-89,]),'LINREG':([6,7,10,11,13,22,30,35,37,44,50,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,78,95,96,98,101,102,103,110,143,144,146,148,149,151,153,154,155,156,158,160,161,163,165,166,178,180,183,186,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,238,240,241,244,246,247,248,250,251,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,88,88,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,88,88,88,88,88,88,88,88,88,-58,88,-62,-63,88,-67,-68,-69,-70,88,-74,-75,88,-79,-80,-112,-53,88,88,88,-21,-54,-55,88,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,88,88,-36,-91,-112,-92,-88,-90,88,-89,]),'RIGHT_CUR_BRACKET':([6,7,10,11,13,22,30,35,37,44,49,50,51,52,53,54,55,56,57,58,59,60,61,69,70,71,72,73,74,75,76,77,94,144,178,180,208,212,216,217,219,225,226,227,228,229,230,231,232,233,234,235,238,239,240,241,243,244,245,246,247,248,250,251,252,253,],[-112,-3,-112,-5,-2,-4,-112,-112,-26,-112,93,-112,-8,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-93,-94,-95,-96,-97,-98,-99,-100,-101,-7,-58,-112,-53,-112,-21,-54,-55,-112,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,241,-112,244,-112,-36,246,-91,247,-112,-92,-88,-90,-112,253,-89,]),'DATAFRAME':([8,],[15,]),'INT':([8,12,45,210,],[17,17,17,17,]),'FLOAT':([8,12,45,210,],[18,18,18,18,]),'CHAR':([8,12,45,210,],[19,19,19,19,]),'VOID':([12,],[25,]),'ARROW':([14,15,16,17,18,19,23,24,25,27,29,47,90,],[26,-27,-112,-9,-10,-11,31,-37,-38,-28,-30,-29,130,]),'LEFT_SQR_BRACKET':([16,17,18,19,63,117,137,],[28,-9,-10,-11,98,98,98,]),'LEFT_CUR_BRACKET':([21,129,191,218,220,249,],[30,178,219,238,240,251,]),'CTEI':([28,42,78,95,96,98,101,102,103,110,143,146,148,149,151,153,154,155,156,158,160,161,163,165,166,180,183,186,],[34,48,111,111,111,111,111,111,111,111,111,111,-62,-63,111,-67,-68,-69,-70,111,-74,-75,111,-79,-80,-53,111,111,]),'COMMA':([33,34,46,69,70,71,72,73,74,75,76,77,91,97,99,106,107,108,109,111,112,113,114,115,116,117,118,133,135,145,147,150,152,157,159,162,164,179,193,194,195,196,197,209,210,211,212,213,214,221,222,223,224,225,226,227,228,229,230,231,232,233,234,236,242,],[39,42,39,-93,-94,-95,-96,-97,-98,-99,-100,-101,-40,-16,-18,-112,-112,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,183,186,-59,-61,-64,-66,-71,-73,-76,-78,210,-112,-112,-112,-112,-81,-39,-112,-42,-21,183,-17,-60,-65,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,210,-41,]),'RIGHT_SQR_BRACKET':([34,41,43,48,69,70,71,72,73,74,75,76,77,97,99,106,107,108,109,111,112,113,114,115,116,117,118,135,145,147,150,152,157,159,162,164,185,187,193,194,195,196,197,212,214,215,221,222,223,224,225,226,227,228,229,230,231,232,233,234,],[-112,47,-32,-31,-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,-112,-112,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,-112,-59,-61,-64,-66,-71,-73,-76,-78,214,-20,-112,-112,-112,-112,-81,-21,-17,-19,-60,-65,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'LEFT_PARENT':([36,63,64,65,66,67,68,78,79,80,81,82,83,84,85,86,87,88,95,96,98,101,102,103,110,117,143,146,148,149,151,153,154,155,156,158,160,161,163,165,166,180,183,186,],[45,96,100,101,102,103,104,110,119,120,121,122,123,124,125,126,127,128,110,110,110,110,110,110,110,96,110,110,-62,-63,110,-67,-68,-69,-70,110,-74,-75,110,-79,-80,-53,110,110,]),'RIGHT_PARENT':([45,69,70,71,72,73,74,75,76,77,89,91,96,97,99,106,107,108,109,111,112,113,114,115,116,117,118,132,133,134,136,137,138,139,140,141,142,145,147,150,152,157,159,162,164,167,168,169,170,171,172,173,174,175,176,177,179,182,184,192,193,194,195,196,197,209,210,211,212,213,214,221,222,223,224,225,226,227,228,229,230,231,232,233,234,236,237,242,],[-112,-93,-94,-95,-96,-97,-98,-99,-100,-101,129,-40,-112,-16,-18,-112,-112,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,181,-112,-23,188,-112,189,-56,-57,190,191,-59,-61,-64,-66,-71,-73,-76,-78,197,198,199,200,201,202,203,204,205,206,207,-112,-22,-25,220,-112,-112,-112,-112,-81,-39,-112,-42,-21,-112,-17,-60,-65,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-24,-41,]),'ASIGN':([62,63,97,99,137,214,],[95,-112,-16,-18,-112,-17,]),'MULT':([69,70,71,72,73,74,75,76,77,97,99,109,111,112,113,114,115,116,117,118,196,197,212,214,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,165,-82,-83,-84,-85,-86,-87,-112,-102,165,-81,-21,-17,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'DIV':([69,70,71,72,73,74,75,76,77,97,99,109,111,112,113,114,115,116,117,118,196,197,212,214,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,166,-82,-83,-84,-85,-86,-87,-112,-102,166,-81,-21,-17,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'PLUS':([69,70,71,72,73,74,75,76,77,97,99,108,109,111,112,113,114,115,116,117,118,162,164,195,196,197,212,214,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,160,-112,-82,-83,-84,-85,-86,-87,-112,-102,-76,-78,160,-112,-81,-21,-17,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'MINUS':([69,70,71,72,73,74,75,76,77,97,99,108,109,111,112,113,114,115,116,117,118,162,164,195,196,197,212,214,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,161,-112,-82,-83,-84,-85,-86,-87,-112,-102,-76,-78,161,-112,-81,-21,-17,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'LESS_THAN':([69,70,71,72,73,74,75,76,77,97,99,107,108,109,111,112,113,114,115,116,117,118,157,159,162,164,194,195,196,197,212,214,223,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,153,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,-71,-73,-76,-78,153,-112,-112,-81,-21,-17,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'GREATER_THAN':([69,70,71,72,73,74,75,76,77,97,99,107,108,109,111,112,113,114,115,116,117,118,157,159,162,164,194,195,196,197,212,214,223,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,154,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,-71,-73,-76,-78,154,-112,-112,-81,-21,-17,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'EQUALS':([69,70,71,72,73,74,75,76,77,97,99,107,108,109,111,112,113,114,115,116,117,118,157,159,162,164,194,195,196,197,212,214,223,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,155,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,-71,-73,-76,-78,155,-112,-112,-81,-21,-17,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'NOTEQUALS':([69,70,71,72,73,74,75,76,77,97,99,107,108,109,111,112,113,114,115,116,117,118,157,159,162,164,194,195,196,197,212,214,223,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,156,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,-71,-73,-76,-78,156,-112,-112,-81,-21,-17,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'AND':([69,70,71,72,73,74,75,76,77,97,99,106,107,108,109,111,112,113,114,115,116,117,118,150,152,157,159,162,164,193,194,195,196,197,212,214,222,223,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,148,-112,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,-64,-66,-71,-73,-76,-78,148,-112,-112,-112,-81,-21,-17,-65,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'OR':([69,70,71,72,73,74,75,76,77,97,99,106,107,108,109,111,112,113,114,115,116,117,118,150,152,157,159,162,164,193,194,195,196,197,212,214,222,223,224,225,226,227,228,229,230,231,232,233,234,],[-93,-94,-95,-96,-97,-98,-99,-100,-101,-16,-18,149,-112,-112,-112,-82,-83,-84,-85,-86,-87,-112,-102,-64,-66,-71,-73,-76,-78,149,-112,-112,-112,-81,-21,-17,-65,-72,-77,-14,-103,-104,-105,-106,-107,-108,-109,-110,-111,]),'CTEF':([78,95,96,98,101,102,103,110,143,146,148,149,151,153,154,155,156,158,160,161,163,165,166,180,183,186,],[112,112,112,112,112,112,112,112,112,112,-62,-63,112,-67,-68,-69,-70,112,-74,-75,112,-79,-80,-53,112,112,]),'CTEC':([78,95,96,98,101,102,103,110,143,146,148,149,151,153,154,155,156,158,160,161,163,165,166,180,183,186,],[113,113,113,113,113,113,113,113,113,113,-62,-63,113,-67,-68,-69,-70,113,-74,-75,113,-79,-80,-53,113,113,]),'LETRERO':([101,119,],[140,168,]),'IF_TRUE':([190,],[218,]),'IF_FALSE':([246,],[249,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'varp':([4,6,30,178,],[5,13,35,208,]),'var':([4,6,30,178,],[6,6,6,6,]),'empty':([4,5,6,10,16,30,33,34,35,44,45,46,50,63,96,106,107,108,109,117,133,135,137,178,179,193,194,195,196,208,210,213,219,236,238,240,246,251,],[7,11,7,11,29,7,40,43,11,51,91,40,51,99,134,147,152,159,164,99,184,187,99,7,211,147,152,159,164,51,91,184,51,211,51,51,250,51,]),'funcp':([5,10,35,],[9,22,44,]),'func':([5,10,35,],[10,10,10,]),'v':([8,],[14,]),'tipo_simp':([8,12,45,210,],[16,24,90,90,]),'bloque':([9,],[20,]),'returnval':([12,],[23,]),'vp':([16,],[27,]),'idp':([26,],[32,]),'idpp':([33,46,],[38,92,]),'vpp':([34,],[41,]),'estatutop':([44,50,208,219,238,240,251,],[49,94,235,239,243,245,252,]),'estatuto':([44,50,208,219,238,240,251,],[50,50,50,50,50,50,50,]),'asign':([44,50,104,208,219,238,240,251,],[52,52,143,52,52,52,52,52,]),'llamada':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[53,53,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,53,53,53,53,53,]),'lee':([44,50,208,219,238,240,251,],[54,54,54,54,54,54,54,]),'escribe':([44,50,208,219,238,240,251,],[55,55,55,55,55,55,55,]),'condicion':([44,50,208,219,238,240,251,],[56,56,56,56,56,56,56,]),'ciclow':([44,50,208,219,238,240,251,],[57,57,57,57,57,57,57,]),'ciclof':([44,50,208,219,238,240,251,],[58,58,58,58,58,58,58,]),'funcesp':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[59,59,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,59,59,59,59,59,]),'return':([44,50,208,219,238,240,251,],[60,60,60,60,60,60,60,]),'copy':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[61,61,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,61,61,61,61,61,]),'variable':([44,50,78,95,96,98,100,101,102,103,104,110,120,121,122,123,124,125,126,127,128,143,146,151,158,163,183,186,208,219,238,240,251,],[62,62,114,114,114,114,136,114,114,114,62,114,169,170,171,172,173,174,175,176,177,114,114,114,114,114,114,114,62,62,62,62,62,]),'mean':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'mode':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'median':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'variance':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'max':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'min':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'staddes':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'boxplot':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'linreg':([44,50,78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,208,219,238,240,251,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'param':([45,210,],[89,236,]),'indexp':([63,117,137,],[97,97,97,]),'exp':([78,95,96,98,101,102,103,110,143,183,186,],[105,131,133,135,139,141,142,167,192,213,215,]),'exprel':([78,95,96,98,101,102,103,110,143,146,183,186,],[106,106,106,106,106,106,106,106,106,193,106,106,]),'e':([78,95,96,98,101,102,103,110,143,146,151,183,186,],[107,107,107,107,107,107,107,107,107,107,194,107,107,]),'t':([78,95,96,98,101,102,103,110,143,146,151,158,183,186,],[108,108,108,108,108,108,108,108,108,108,108,195,108,108,]),'f':([78,95,96,98,101,102,103,110,143,146,151,158,163,183,186,],[109,109,109,109,109,109,109,109,109,109,109,109,196,109,109,]),'expp':([96,],[132,]),'escribep':([101,],[138,]),'logic':([106,193,],[145,221,]),'logicsig':([106,193,],[146,146,]),'relacionalp':([107,194,],[150,222,]),'relsig':([107,194,],[151,151,]),'tp':([108,195,],[157,223,]),'tsig':([108,195,],[158,158,]),'fp':([109,196,],[162,224,]),'fsig':([109,196,],[163,163,]),'exppp':([133,213,],[182,237,]),'indexpp':([135,],[185,]),'paramp':([179,236,],[209,242,]),'falsop':([246,],[248,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> SCRIPT ID SEMICOLON varp funcp bloque','programa',6,'p_programa','lexer-parser.py',180),
  ('varp -> var varp','varp',2,'p_programa','lexer-parser.py',181),
  ('varp -> empty','varp',1,'p_programa','lexer-parser.py',182),
  ('funcp -> func funcp','funcp',2,'p_programa','lexer-parser.py',183),
  ('funcp -> empty','funcp',1,'p_programa','lexer-parser.py',184),
  ('bloque -> DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET','bloque',6,'p_bloque','lexer-parser.py',190),
  ('estatutop -> estatuto estatutop','estatutop',2,'p_bloque','lexer-parser.py',191),
  ('estatutop -> empty','estatutop',1,'p_bloque','lexer-parser.py',192),
  ('tipo_simp -> INT','tipo_simp',1,'p_tipo_simp','lexer-parser.py',198),
  ('tipo_simp -> FLOAT','tipo_simp',1,'p_tipo_simp','lexer-parser.py',199),
  ('tipo_simp -> CHAR','tipo_simp',1,'p_tipo_simp','lexer-parser.py',200),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','lexer-parser.py',206),
  ('tipo_comp -> file','tipo_comp',1,'p_tipo_comp','lexer-parser.py',207),
  ('copy -> READ_FILE LEFT_PARENT LETRERO RIGHT_PARENT SEMICOLON','copy',5,'p_copy','lexer-parser.py',213),
  ('file -> ID','file',1,'p_file','lexer-parser.py',219),
  ('variable -> ID indexp','variable',2,'p_variable','lexer-parser.py',225),
  ('indexp -> LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET','indexp',4,'p_variable','lexer-parser.py',226),
  ('indexp -> empty','indexp',1,'p_variable','lexer-parser.py',227),
  ('indexpp -> COMMA exp','indexpp',2,'p_variable','lexer-parser.py',228),
  ('indexpp -> empty','indexpp',1,'p_variable','lexer-parser.py',229),
  ('llamada -> ID LEFT_PARENT expp RIGHT_PARENT SEMICOLON','llamada',5,'p_llamada','lexer-parser.py',235),
  ('expp -> exp exppp','expp',2,'p_llamada','lexer-parser.py',236),
  ('expp -> empty','expp',1,'p_llamada','lexer-parser.py',237),
  ('exppp -> COMMA exp exppp','exppp',3,'p_llamada','lexer-parser.py',238),
  ('exppp -> empty','exppp',1,'p_llamada','lexer-parser.py',239),
  ('var -> VAR v ARROW idp SEMICOLON','var',5,'p_var','lexer-parser.py',245),
  ('v -> DATAFRAME','v',1,'p_var','lexer-parser.py',246),
  ('v -> tipo_simp vp','v',2,'p_var','lexer-parser.py',247),
  ('vp -> LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET','vp',4,'p_var','lexer-parser.py',248),
  ('vp -> empty','vp',1,'p_var','lexer-parser.py',249),
  ('vpp -> COMMA CTEI','vpp',2,'p_var','lexer-parser.py',250),
  ('vpp -> empty','vpp',1,'p_var','lexer-parser.py',251),
  ('idp -> ID idpp','idp',2,'p_var','lexer-parser.py',252),
  ('idpp -> COMMA ID idpp','idpp',3,'p_var','lexer-parser.py',253),
  ('idpp -> empty','idpp',1,'p_var','lexer-parser.py',254),
  ('func -> FUNC returnval ARROW ID LEFT_PARENT param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET','func',11,'p_func','lexer-parser.py',260),
  ('returnval -> tipo_simp','returnval',1,'p_func','lexer-parser.py',261),
  ('returnval -> VOID','returnval',1,'p_func','lexer-parser.py',262),
  ('param -> tipo_simp ARROW ID paramp','param',4,'p_param','lexer-parser.py',268),
  ('param -> empty','param',1,'p_param','lexer-parser.py',269),
  ('paramp -> COMMA param paramp','paramp',3,'p_param','lexer-parser.py',270),
  ('paramp -> empty','paramp',1,'p_param','lexer-parser.py',271),
  ('estatuto -> asign','estatuto',1,'p_estatuto','lexer-parser.py',277),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','lexer-parser.py',278),
  ('estatuto -> lee','estatuto',1,'p_estatuto','lexer-parser.py',279),
  ('estatuto -> escribe','estatuto',1,'p_estatuto','lexer-parser.py',280),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexer-parser.py',281),
  ('estatuto -> ciclow','estatuto',1,'p_estatuto','lexer-parser.py',282),
  ('estatuto -> ciclof','estatuto',1,'p_estatuto','lexer-parser.py',283),
  ('estatuto -> funcesp','estatuto',1,'p_estatuto','lexer-parser.py',284),
  ('estatuto -> return','estatuto',1,'p_estatuto','lexer-parser.py',285),
  ('estatuto -> copy','estatuto',1,'p_estatuto','lexer-parser.py',286),
  ('asign -> variable ASIGN exp SEMICOLON','asign',4,'p_asign','lexer-parser.py',292),
  ('lee -> READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON','lee',5,'p_lee','lexer-parser.py',298),
  ('escribe -> WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON','escribe',5,'p_escribe','lexer-parser.py',304),
  ('escribep -> exp','escribep',1,'p_escribe','lexer-parser.py',305),
  ('escribep -> LETRERO','escribep',1,'p_escribe','lexer-parser.py',306),
  ('return -> RETURNS exp SEMICOLON','return',3,'p_return','lexer-parser.py',312),
  ('exp -> exprel logic','exp',2,'p_exp','lexer-parser.py',318),
  ('logic -> logicsig exprel logic','logic',3,'p_exp','lexer-parser.py',319),
  ('logic -> empty','logic',1,'p_exp','lexer-parser.py',320),
  ('logicsig -> AND','logicsig',1,'p_exp','lexer-parser.py',321),
  ('logicsig -> OR','logicsig',1,'p_exp','lexer-parser.py',322),
  ('exprel -> e relacionalp','exprel',2,'p_exprel','lexer-parser.py',328),
  ('relacionalp -> relsig e relacionalp','relacionalp',3,'p_exprel','lexer-parser.py',329),
  ('relacionalp -> empty','relacionalp',1,'p_exprel','lexer-parser.py',330),
  ('relsig -> LESS_THAN','relsig',1,'p_exprel','lexer-parser.py',331),
  ('relsig -> GREATER_THAN','relsig',1,'p_exprel','lexer-parser.py',332),
  ('relsig -> EQUALS','relsig',1,'p_exprel','lexer-parser.py',333),
  ('relsig -> NOTEQUALS','relsig',1,'p_exprel','lexer-parser.py',334),
  ('e -> t tp','e',2,'p_e','lexer-parser.py',340),
  ('tp -> tsig t tp','tp',3,'p_e','lexer-parser.py',341),
  ('tp -> empty','tp',1,'p_e','lexer-parser.py',342),
  ('tsig -> PLUS','tsig',1,'p_e','lexer-parser.py',343),
  ('tsig -> MINUS','tsig',1,'p_e','lexer-parser.py',344),
  ('t -> f fp','t',2,'p_t','lexer-parser.py',350),
  ('fp -> fsig f fp','fp',3,'p_t','lexer-parser.py',351),
  ('fp -> empty','fp',1,'p_t','lexer-parser.py',352),
  ('fsig -> MULT','fsig',1,'p_t','lexer-parser.py',353),
  ('fsig -> DIV','fsig',1,'p_t','lexer-parser.py',354),
  ('f -> LEFT_PARENT exp RIGHT_PARENT','f',3,'p_f','lexer-parser.py',360),
  ('f -> CTEI','f',1,'p_f','lexer-parser.py',361),
  ('f -> CTEF','f',1,'p_f','lexer-parser.py',362),
  ('f -> CTEC','f',1,'p_f','lexer-parser.py',363),
  ('f -> variable','f',1,'p_f','lexer-parser.py',364),
  ('f -> llamada','f',1,'p_f','lexer-parser.py',365),
  ('f -> funcesp','f',1,'p_f','lexer-parser.py',366),
  ('condicion -> IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET falsop','condicion',9,'p_condicion','lexer-parser.py',372),
  ('falsop -> IF_FALSE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','falsop',4,'p_condicion','lexer-parser.py',373),
  ('falsop -> empty','falsop',1,'p_condicion','lexer-parser.py',374),
  ('ciclow -> WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclow',7,'p_ciclow','lexer-parser.py',380),
  ('ciclof -> FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclof',8,'p_ciclof','lexer-parser.py',386),
  ('funcesp -> mean','funcesp',1,'p_funcesp','lexer-parser.py',392),
  ('funcesp -> mode','funcesp',1,'p_funcesp','lexer-parser.py',393),
  ('funcesp -> median','funcesp',1,'p_funcesp','lexer-parser.py',394),
  ('funcesp -> variance','funcesp',1,'p_funcesp','lexer-parser.py',395),
  ('funcesp -> max','funcesp',1,'p_funcesp','lexer-parser.py',396),
  ('funcesp -> min','funcesp',1,'p_funcesp','lexer-parser.py',397),
  ('funcesp -> staddes','funcesp',1,'p_funcesp','lexer-parser.py',398),
  ('funcesp -> boxplot','funcesp',1,'p_funcesp','lexer-parser.py',399),
  ('funcesp -> linreg','funcesp',1,'p_funcesp','lexer-parser.py',400),
  ('funcesp -> copy','funcesp',1,'p_funcesp','lexer-parser.py',401),
  ('mean -> MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mean',5,'p_mean','lexer-parser.py',407),
  ('mode -> MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mode',5,'p_mode','lexer-parser.py',413),
  ('median -> MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','median',5,'p_median','lexer-parser.py',419),
  ('variance -> VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','variance',5,'p_variance','lexer-parser.py',425),
  ('max -> MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON','max',5,'p_max','lexer-parser.py',431),
  ('min -> MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','min',5,'p_min','lexer-parser.py',437),
  ('staddes -> STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON','staddes',5,'p_staddes','lexer-parser.py',443),
  ('boxplot -> BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON','boxplot',5,'p_boxplot','lexer-parser.py',449),
  ('linreg -> LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON','linreg',5,'p_linreg','lexer-parser.py',455),
  ('empty -> <empty>','empty',0,'p_empty','lexer-parser.py',461),
]
