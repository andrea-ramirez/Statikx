
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVAND ARROW ASIGN BOXPLOT CHAR COMMA COMMENT CTEC CTEF CTEI DATAFRAME DIV DO EQUALS FLOAT FOR FUNC GREATER_THAN ID IF IF_FALSE IF_TRUE INT LEFT_CUR_BRACKET LEFT_PARENT LEFT_SQR_BRACKET LESS_THAN LETRERO LINREG MAX MEAN MEDIAN MIN MINUS MODE MULT NOTEQUALS OR PLUS READ READ_FILE RETURNS RIGHT_CUR_BRACKET RIGHT_PARENT RIGHT_SQR_BRACKET SCRIPT SEMICOLON STADDES VAR VARIANCE VOID WHILE WRITE\n    programa : SCRIPT pnCrearDirFunc ID pnScriptFuncDir SEMICOLON varp funcp bloque\n    varp : var varp \n         | empty\n    funcp : func funcp \n          | empty\n    \n    bloque : DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET pnEndScript\n    estatutop : estatuto estatutop \n              | empty\n    \n    tipo_simp : INT pnSaveTypeVar\n              | FLOAT pnSaveTypeVar\n              | CHAR pnSaveTypeVar\n    \n    tipo_comp : DATAFRAME \n              | file\n    \n    copy : READ_FILE LEFT_PARENT LETRERO RIGHT_PARENT SEMICOLON\n    \n    file : ID\n    \n    variable : ID indexp\n    indexp : LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET \n           | empty\n    indexpp : COMMA exp \n            | empty\n    \n    llamada : ID LEFT_PARENT expp RIGHT_PARENT SEMICOLON\n    expp : exp exppp\n         | empty\n    exppp : COMMA exp exppp\n          | empty\n    \n    var : VAR pnCheckTablaVar v ARROW idp SEMICOLON\n    v : DATAFRAME pnSaveTypeVar\n      | tipo_simp vp\n    vp : LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET \n       | empty\n    vpp : COMMA CTEI \n        | empty\n    idp : ID pnCheckNameTablaVar idpp\n    idpp : COMMA ID pnCheckNameTablaVar idpp\n         | empty\n    \n    func : FUNC returnval ARROW ID pnAddFuncinDir LEFT_PARENT pnCheckTablaVar param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET pnCloseCurrentFunction\n    returnval : tipo_simp \n              | VOID pnSaveTypeVar\n    \n    param : paramlist\n          | empty\n    paramlist : tipoparam ARROW ID paramlistp\n    tipoparam : tipo_simp\n              | DATAFRAME\n    paramlistp : COMMA paramlist\n               | empty\n    \n    estatuto : asign\n             | llamada\n             | lee\n             | escribe\n             | condicion\n             | ciclow\n             | ciclof\n             | funcesp\n             | return\n             | copy\n    \n    asign : variable ASIGN exp SEMICOLON\n    \n    lee : READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    escribe :  WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON\n    escribep : exp \n             | LETRERO\n    \n    return : RETURNS exp SEMICOLON\n    \n    exp : exprel logic\n    logic : logicsig exprel logic \n          | empty\n    logicsig : AND \n             | OR\n    \n    exprel : e relacionalp\n    relacionalp : relsig e relacionalp \n                | empty\n    relsig : LESS_THAN \n           | GREATER_THAN \n           | EQUALS \n           | NOTEQUALS\n    \n    e : t tp\n    tp : tsig t tp \n       | empty\n    tsig : PLUS \n         | MINUS\n    \n    t : f fp\n    fp : fsig f fp \n       | empty\n    fsig : MULT \n         | DIV\n    \n    f : LEFT_PARENT exp RIGHT_PARENT\n      | CTEI\n      | CTEF\n      | CTEC\n      | variable\n      | llamada\n      | funcesp\n    \n    condicion : IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET falsop\n    falsop : IF_FALSE  LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET \n           | empty\n    \n    ciclow : WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    ciclof : FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET\n    \n    funcesp : mean\n            | mode\n            | median\n            | variance\n            | max\n            | min\n            | staddes\n            | boxplot\n            | linreg\n            | copy\n    \n    mean : MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    mode : MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    median : MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    variance : VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    max : MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    min : MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    staddes : STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    boxplot : BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    linreg : LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON\n    \n    pnCrearDirFunc : empty\n    \n    pnScriptFuncDir : empty\n    \n    pnCheckTablaVar : empty\n    \n    pnSaveTypeVar : empty\n    \n    pnCheckNameTablaVar : empty\n    \n    pnAddFuncinDir : empty\n    \n    pnCloseCurrentFunction : empty\n    \n    pnEndScript : empty\n    \n    empty :'
    
_lr_action_items = {'SCRIPT':([0,],[2,]),'$end':([1,20,104,142,143,],[0,-1,-123,-6,-122,]),'ID':([2,3,4,10,11,14,15,17,22,32,33,39,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,100,106,107,109,111,112,113,114,115,121,131,132,133,134,135,136,137,138,139,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,227,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,5,-115,-123,-3,-123,-5,-2,-4,-123,45,47,-123,72,-26,72,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,128,141,128,128,128,150,128,128,128,150,128,150,150,150,150,150,150,150,150,150,128,-61,128,-65,-66,128,-70,-71,-72,-73,128,-77,-78,128,-82,-83,-56,128,128,253,-21,-57,-58,72,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,72,72,72,-94,-123,-95,-123,-91,-93,-36,-121,72,-92,]),'SEMICOLON':([5,6,7,46,47,53,54,78,79,80,81,82,83,84,85,86,99,101,108,110,116,117,118,119,120,122,123,124,125,126,127,128,129,141,144,158,160,163,165,170,172,175,177,197,199,206,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,231,238,239,240,241,242,243,244,245,246,247,248,249,250,251,],[-123,8,-116,52,-123,-123,-119,-96,-97,-98,-99,-100,-101,-102,-103,-104,-33,-35,-16,-18,157,-123,-123,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-123,198,-62,-64,-67,-69,-74,-76,-79,-81,-123,229,233,234,-123,-123,-123,-123,-84,242,243,244,245,246,247,248,249,250,251,-34,-21,-17,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'VAR':([8,10,32,52,252,],[12,12,12,-26,12,]),'FUNC':([8,9,10,11,14,17,32,44,52,269,273,274,],[-123,16,-123,-3,16,-2,-123,16,-26,-123,-36,-121,]),'DO':([8,9,10,11,13,14,15,17,22,52,269,273,274,],[-123,-123,-123,-3,21,-123,-5,-2,-4,-26,-123,-36,-121,]),'READ':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,157,198,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,73,-26,73,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-56,-21,-57,-58,73,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,73,73,73,-94,-123,-95,-123,-91,-93,-36,-121,73,-92,]),'WRITE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,157,198,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,74,-26,74,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-56,-21,-57,-58,74,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,74,74,74,-94,-123,-95,-123,-91,-93,-36,-121,74,-92,]),'IF':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,157,198,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,75,-26,75,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-56,-21,-57,-58,75,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,75,75,75,-94,-123,-95,-123,-91,-93,-36,-121,75,-92,]),'WHILE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,157,198,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,76,-26,76,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-56,-21,-57,-58,76,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,76,76,76,-94,-123,-95,-123,-91,-93,-36,-121,76,-92,]),'FOR':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,157,198,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,77,-26,77,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-56,-21,-57,-58,77,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,77,77,77,-94,-123,-95,-123,-91,-93,-36,-121,77,-92,]),'RETURNS':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,157,198,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,87,-26,87,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-61,-56,-21,-57,-58,87,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,87,87,87,-94,-123,-95,-123,-91,-93,-36,-121,87,-92,]),'READ_FILE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,88,-26,88,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,88,88,88,88,88,88,88,88,88,-61,88,-65,-66,88,-70,-71,-72,-73,88,-77,-78,88,-82,-83,-56,88,88,-21,-57,-58,88,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,88,88,88,-94,-123,-95,-123,-91,-93,-36,-121,88,-92,]),'MEAN':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,89,-26,89,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,89,89,89,89,89,89,89,89,89,-61,89,-65,-66,89,-70,-71,-72,-73,89,-77,-78,89,-82,-83,-56,89,89,-21,-57,-58,89,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,89,89,89,-94,-123,-95,-123,-91,-93,-36,-121,89,-92,]),'MODE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,90,-26,90,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,90,90,90,90,90,90,90,90,90,-61,90,-65,-66,90,-70,-71,-72,-73,90,-77,-78,90,-82,-83,-56,90,90,-21,-57,-58,90,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,90,90,90,-94,-123,-95,-123,-91,-93,-36,-121,90,-92,]),'MEDIAN':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,91,-26,91,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,91,91,91,91,91,91,91,91,91,-61,91,-65,-66,91,-70,-71,-72,-73,91,-77,-78,91,-82,-83,-56,91,91,-21,-57,-58,91,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,91,91,91,-94,-123,-95,-123,-91,-93,-36,-121,91,-92,]),'VARIANCE':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,92,-26,92,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,92,92,92,92,92,92,92,92,92,-61,92,-65,-66,92,-70,-71,-72,-73,92,-77,-78,92,-82,-83,-56,92,92,-21,-57,-58,92,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,92,92,92,-94,-123,-95,-123,-91,-93,-36,-121,92,-92,]),'MAX':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,93,-26,93,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,93,93,93,93,93,93,93,93,93,-61,93,-65,-66,93,-70,-71,-72,-73,93,-77,-78,93,-82,-83,-56,93,93,-21,-57,-58,93,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,93,93,93,-94,-123,-95,-123,-91,-93,-36,-121,93,-92,]),'MIN':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,94,-26,94,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,94,94,94,94,94,94,94,94,94,-61,94,-65,-66,94,-70,-71,-72,-73,94,-77,-78,94,-82,-83,-56,94,94,-21,-57,-58,94,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,94,94,94,-94,-123,-95,-123,-91,-93,-36,-121,94,-92,]),'STADDES':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,95,-26,95,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,95,95,95,95,95,95,95,95,95,-61,95,-65,-66,95,-70,-71,-72,-73,95,-77,-78,95,-82,-83,-56,95,95,-21,-57,-58,95,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,95,95,95,-94,-123,-95,-123,-91,-93,-36,-121,95,-92,]),'BOXPLOT':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,96,-26,96,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,96,96,96,96,96,96,96,96,96,-61,96,-65,-66,96,-70,-71,-72,-73,96,-77,-78,96,-82,-83,-56,96,96,-21,-57,-58,96,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,96,96,96,-94,-123,-95,-123,-91,-93,-36,-121,96,-92,]),'LINREG':([10,11,14,15,17,22,32,44,49,52,59,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,87,106,107,109,112,113,114,121,156,157,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,257,258,263,267,268,269,270,272,273,274,275,277,],[-123,-3,-123,-5,-2,-4,-123,-123,97,-26,97,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,97,97,97,97,97,97,97,97,97,-61,97,-65,-66,97,-70,-71,-72,-73,97,-77,-78,97,-82,-83,-56,97,97,-21,-57,-58,97,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,97,97,97,-94,-123,-95,-123,-91,-93,-36,-121,97,-92,]),'RIGHT_CUR_BRACKET':([10,11,14,15,17,22,32,44,49,52,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,84,85,86,105,157,198,229,233,234,236,242,243,244,245,246,247,248,249,250,251,252,255,256,257,258,262,263,264,265,267,268,269,270,272,273,274,275,276,277,],[-123,-3,-123,-5,-2,-4,-123,-123,-123,-26,104,-123,-8,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-96,-97,-98,-99,-100,-101,-102,-103,-104,-7,-61,-56,-21,-57,-58,-123,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,-123,263,-123,-123,267,-94,268,269,-123,-95,-123,-91,-93,-36,-121,-123,277,-92,]),'DATAFRAME':([12,18,19,98,140,260,],[-123,30,-117,-123,196,196,]),'INT':([12,16,18,19,98,140,260,],[-123,26,26,-117,-123,26,26,]),'FLOAT':([12,16,18,19,98,140,260,],[-123,27,27,-117,-123,27,27,]),'CHAR':([12,16,18,19,98,140,260,],[-123,28,28,-117,-123,28,28,]),'VOID':([16,],[25,]),'RIGHT_PARENT':([19,78,79,80,81,82,83,84,85,86,98,107,108,110,117,118,119,120,122,123,124,125,126,127,128,129,140,145,146,147,149,150,151,152,153,154,155,158,160,163,165,170,172,175,177,180,181,182,183,184,185,186,187,188,189,190,191,192,193,200,202,210,211,212,213,214,215,229,230,231,238,239,240,241,242,243,244,245,246,247,248,249,250,251,253,254,259,261,266,],[-117,-96,-97,-98,-99,-100,-101,-102,-103,-104,-123,-123,-16,-18,-123,-123,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-123,199,-123,-23,206,-123,207,-59,-60,208,209,-62,-64,-67,-69,-74,-76,-79,-81,215,216,217,218,219,220,221,222,223,224,225,226,-39,-40,-22,-25,237,-123,-123,-123,-123,-84,-21,-123,-17,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,-123,-24,-41,-45,-44,]),'LEFT_CUR_BRACKET':([21,209,226,235,237,271,],[32,236,252,255,257,275,]),'ARROW':([23,24,25,26,27,28,29,30,31,34,35,36,37,38,40,41,43,102,194,195,196,],[33,-37,-123,-123,-123,-123,39,-123,-123,-38,-118,-9,-10,-11,-27,-28,-30,-29,227,-42,-43,]),'LEFT_SQR_BRACKET':([26,27,28,31,35,36,37,38,72,128,150,],[-123,-123,-123,42,-118,-9,-10,-11,109,109,109,]),'CTEI':([42,56,87,106,107,109,112,113,114,121,156,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,],[48,103,122,122,122,122,122,122,122,122,122,122,-65,-66,122,-70,-71,-72,-73,122,-77,-78,122,-82,-83,-56,122,122,]),'LEFT_PARENT':([45,50,51,72,73,74,75,76,77,87,88,89,90,91,92,93,94,95,96,97,106,107,109,112,113,114,121,128,156,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,],[-123,98,-120,107,111,112,113,114,115,121,130,131,132,133,134,135,136,137,138,139,121,121,121,121,121,121,121,107,121,121,-65,-66,121,-70,-71,-72,-73,121,-77,-78,121,-82,-83,-56,121,121,]),'COMMA':([47,48,53,54,78,79,80,81,82,83,84,85,86,108,110,117,118,119,120,122,123,124,125,126,127,128,129,141,146,148,158,160,163,165,170,172,175,177,197,211,212,213,214,215,229,230,231,238,239,240,241,242,243,244,245,246,247,248,249,250,251,253,],[-123,56,100,-119,-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,-123,-123,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-123,201,204,-62,-64,-67,-69,-74,-76,-79,-81,100,-123,-123,-123,-123,-84,-21,201,-17,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,260,]),'RIGHT_SQR_BRACKET':([48,55,57,78,79,80,81,82,83,84,85,86,103,108,110,117,118,119,120,122,123,124,125,126,127,128,129,148,158,160,163,165,170,172,175,177,203,205,211,212,213,214,215,229,231,232,238,239,240,241,242,243,244,245,246,247,248,249,250,251,],[-123,102,-32,-96,-97,-98,-99,-100,-101,-102,-103,-104,-31,-16,-18,-123,-123,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-123,-62,-64,-67,-69,-74,-76,-79,-81,231,-20,-123,-123,-123,-123,-84,-21,-17,-19,-63,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'ASIGN':([71,72,108,110,150,231,],[106,-123,-16,-18,-123,-17,]),'MULT':([78,79,80,81,82,83,84,85,86,108,110,120,122,123,124,125,126,127,128,129,214,215,229,231,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,178,-85,-86,-87,-88,-89,-90,-123,-105,178,-84,-21,-17,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'DIV':([78,79,80,81,82,83,84,85,86,108,110,120,122,123,124,125,126,127,128,129,214,215,229,231,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,179,-85,-86,-87,-88,-89,-90,-123,-105,179,-84,-21,-17,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'PLUS':([78,79,80,81,82,83,84,85,86,108,110,119,120,122,123,124,125,126,127,128,129,175,177,213,214,215,229,231,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,173,-123,-85,-86,-87,-88,-89,-90,-123,-105,-79,-81,173,-123,-84,-21,-17,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'MINUS':([78,79,80,81,82,83,84,85,86,108,110,119,120,122,123,124,125,126,127,128,129,175,177,213,214,215,229,231,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,174,-123,-85,-86,-87,-88,-89,-90,-123,-105,-79,-81,174,-123,-84,-21,-17,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'LESS_THAN':([78,79,80,81,82,83,84,85,86,108,110,118,119,120,122,123,124,125,126,127,128,129,170,172,175,177,212,213,214,215,229,231,240,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,166,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-74,-76,-79,-81,166,-123,-123,-84,-21,-17,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'GREATER_THAN':([78,79,80,81,82,83,84,85,86,108,110,118,119,120,122,123,124,125,126,127,128,129,170,172,175,177,212,213,214,215,229,231,240,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,167,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-74,-76,-79,-81,167,-123,-123,-84,-21,-17,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'EQUALS':([78,79,80,81,82,83,84,85,86,108,110,118,119,120,122,123,124,125,126,127,128,129,170,172,175,177,212,213,214,215,229,231,240,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,168,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-74,-76,-79,-81,168,-123,-123,-84,-21,-17,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'NOTEQUALS':([78,79,80,81,82,83,84,85,86,108,110,118,119,120,122,123,124,125,126,127,128,129,170,172,175,177,212,213,214,215,229,231,240,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,169,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-74,-76,-79,-81,169,-123,-123,-84,-21,-17,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'AND':([78,79,80,81,82,83,84,85,86,108,110,117,118,119,120,122,123,124,125,126,127,128,129,163,165,170,172,175,177,211,212,213,214,215,229,231,239,240,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,161,-123,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-67,-69,-74,-76,-79,-81,161,-123,-123,-123,-84,-21,-17,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'OR':([78,79,80,81,82,83,84,85,86,108,110,117,118,119,120,122,123,124,125,126,127,128,129,163,165,170,172,175,177,211,212,213,214,215,229,231,239,240,241,242,243,244,245,246,247,248,249,250,251,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-16,-18,162,-123,-123,-123,-85,-86,-87,-88,-89,-90,-123,-105,-67,-69,-74,-76,-79,-81,162,-123,-123,-123,-84,-21,-17,-68,-75,-80,-14,-106,-107,-108,-109,-110,-111,-112,-113,-114,]),'CTEF':([87,106,107,109,112,113,114,121,156,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,],[123,123,123,123,123,123,123,123,123,123,-65,-66,123,-70,-71,-72,-73,123,-77,-78,123,-82,-83,-56,123,123,]),'CTEC':([87,106,107,109,112,113,114,121,156,159,161,162,164,166,167,168,169,171,173,174,176,178,179,198,201,204,],[124,124,124,124,124,124,124,124,124,124,-65,-66,124,-70,-71,-72,-73,124,-77,-78,124,-82,-83,-56,124,124,]),'LETRERO':([112,130,],[153,181,]),'IF_TRUE':([208,],[235,]),'IF_FALSE':([267,],[271,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'pnCrearDirFunc':([2,],[3,]),'empty':([2,5,8,9,10,12,14,25,26,27,28,30,31,32,44,45,47,48,49,53,59,72,98,104,107,117,118,119,120,128,140,141,146,148,150,197,211,212,213,214,230,236,252,253,255,257,258,267,269,275,],[4,7,11,15,11,19,15,35,35,35,35,35,43,11,15,51,54,57,60,101,60,110,19,143,147,160,165,172,177,110,193,54,202,205,110,101,160,165,172,177,202,60,11,261,60,60,60,272,274,60,]),'pnScriptFuncDir':([5,],[6,]),'varp':([8,10,32,252,],[9,17,44,258,]),'var':([8,10,32,252,],[10,10,10,10,]),'funcp':([9,14,44,],[13,22,49,]),'func':([9,14,44,],[14,14,14,]),'pnCheckTablaVar':([12,98,],[18,140,]),'bloque':([13,],[20,]),'returnval':([16,],[23,]),'tipo_simp':([16,18,140,260,],[24,31,195,195,]),'v':([18,],[29,]),'pnSaveTypeVar':([25,26,27,28,30,],[34,36,37,38,40,]),'vp':([31,],[41,]),'idp':([39,],[46,]),'pnAddFuncinDir':([45,],[50,]),'pnCheckNameTablaVar':([47,141,],[53,197,]),'vpp':([48,],[55,]),'estatutop':([49,59,236,255,257,258,275,],[58,105,256,262,264,265,276,]),'estatuto':([49,59,236,255,257,258,275,],[59,59,59,59,59,59,59,]),'asign':([49,59,115,236,255,257,258,275,],[61,61,156,61,61,61,61,61,]),'llamada':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[62,62,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,62,62,62,62,62,]),'lee':([49,59,236,255,257,258,275,],[63,63,63,63,63,63,63,]),'escribe':([49,59,236,255,257,258,275,],[64,64,64,64,64,64,64,]),'condicion':([49,59,236,255,257,258,275,],[65,65,65,65,65,65,65,]),'ciclow':([49,59,236,255,257,258,275,],[66,66,66,66,66,66,66,]),'ciclof':([49,59,236,255,257,258,275,],[67,67,67,67,67,67,67,]),'funcesp':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[68,68,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,68,68,68,68,68,]),'return':([49,59,236,255,257,258,275,],[69,69,69,69,69,69,69,]),'copy':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[70,70,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,70,70,70,70,70,]),'variable':([49,59,87,106,107,109,111,112,113,114,115,121,131,132,133,134,135,136,137,138,139,156,159,164,171,176,201,204,236,255,257,258,275,],[71,71,125,125,125,125,149,125,125,125,71,125,182,183,184,185,186,187,188,189,190,125,125,125,125,125,125,125,71,71,71,71,71,]),'mean':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'mode':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'median':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'variance':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'max':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'min':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'staddes':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'boxplot':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'linreg':([49,59,87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,236,255,257,258,275,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'idpp':([53,197,],[99,228,]),'indexp':([72,128,150,],[108,108,108,]),'exp':([87,106,107,109,112,113,114,121,156,201,204,],[116,144,146,148,152,154,155,180,210,230,232,]),'exprel':([87,106,107,109,112,113,114,121,156,159,201,204,],[117,117,117,117,117,117,117,117,117,211,117,117,]),'e':([87,106,107,109,112,113,114,121,156,159,164,201,204,],[118,118,118,118,118,118,118,118,118,118,212,118,118,]),'t':([87,106,107,109,112,113,114,121,156,159,164,171,201,204,],[119,119,119,119,119,119,119,119,119,119,119,213,119,119,]),'f':([87,106,107,109,112,113,114,121,156,159,164,171,176,201,204,],[120,120,120,120,120,120,120,120,120,120,120,120,214,120,120,]),'pnEndScript':([104,],[142,]),'expp':([107,],[145,]),'escribep':([112,],[151,]),'logic':([117,211,],[158,238,]),'logicsig':([117,211,],[159,159,]),'relacionalp':([118,212,],[163,239,]),'relsig':([118,212,],[164,164,]),'tp':([119,213,],[170,240,]),'tsig':([119,213,],[171,171,]),'fp':([120,214,],[175,241,]),'fsig':([120,214,],[176,176,]),'param':([140,],[191,]),'paramlist':([140,260,],[192,266,]),'tipoparam':([140,260,],[194,194,]),'exppp':([146,230,],[200,254,]),'indexpp':([148,],[203,]),'paramlistp':([253,],[259,]),'falsop':([267,],[270,]),'pnCloseCurrentFunction':([269,],[273,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> SCRIPT pnCrearDirFunc ID pnScriptFuncDir SEMICOLON varp funcp bloque','programa',8,'p_programa','lexer-parser.py',176),
  ('varp -> var varp','varp',2,'p_programa','lexer-parser.py',177),
  ('varp -> empty','varp',1,'p_programa','lexer-parser.py',178),
  ('funcp -> func funcp','funcp',2,'p_programa','lexer-parser.py',179),
  ('funcp -> empty','funcp',1,'p_programa','lexer-parser.py',180),
  ('bloque -> DO LEFT_CUR_BRACKET varp funcp estatutop RIGHT_CUR_BRACKET pnEndScript','bloque',7,'p_bloque','lexer-parser.py',186),
  ('estatutop -> estatuto estatutop','estatutop',2,'p_bloque','lexer-parser.py',187),
  ('estatutop -> empty','estatutop',1,'p_bloque','lexer-parser.py',188),
  ('tipo_simp -> INT pnSaveTypeVar','tipo_simp',2,'p_tipo_simp','lexer-parser.py',194),
  ('tipo_simp -> FLOAT pnSaveTypeVar','tipo_simp',2,'p_tipo_simp','lexer-parser.py',195),
  ('tipo_simp -> CHAR pnSaveTypeVar','tipo_simp',2,'p_tipo_simp','lexer-parser.py',196),
  ('tipo_comp -> DATAFRAME','tipo_comp',1,'p_tipo_comp','lexer-parser.py',202),
  ('tipo_comp -> file','tipo_comp',1,'p_tipo_comp','lexer-parser.py',203),
  ('copy -> READ_FILE LEFT_PARENT LETRERO RIGHT_PARENT SEMICOLON','copy',5,'p_copy','lexer-parser.py',209),
  ('file -> ID','file',1,'p_file','lexer-parser.py',215),
  ('variable -> ID indexp','variable',2,'p_variable','lexer-parser.py',221),
  ('indexp -> LEFT_SQR_BRACKET exp indexpp RIGHT_SQR_BRACKET','indexp',4,'p_variable','lexer-parser.py',222),
  ('indexp -> empty','indexp',1,'p_variable','lexer-parser.py',223),
  ('indexpp -> COMMA exp','indexpp',2,'p_variable','lexer-parser.py',224),
  ('indexpp -> empty','indexpp',1,'p_variable','lexer-parser.py',225),
  ('llamada -> ID LEFT_PARENT expp RIGHT_PARENT SEMICOLON','llamada',5,'p_llamada','lexer-parser.py',231),
  ('expp -> exp exppp','expp',2,'p_llamada','lexer-parser.py',232),
  ('expp -> empty','expp',1,'p_llamada','lexer-parser.py',233),
  ('exppp -> COMMA exp exppp','exppp',3,'p_llamada','lexer-parser.py',234),
  ('exppp -> empty','exppp',1,'p_llamada','lexer-parser.py',235),
  ('var -> VAR pnCheckTablaVar v ARROW idp SEMICOLON','var',6,'p_var','lexer-parser.py',241),
  ('v -> DATAFRAME pnSaveTypeVar','v',2,'p_var','lexer-parser.py',242),
  ('v -> tipo_simp vp','v',2,'p_var','lexer-parser.py',243),
  ('vp -> LEFT_SQR_BRACKET CTEI vpp RIGHT_SQR_BRACKET','vp',4,'p_var','lexer-parser.py',244),
  ('vp -> empty','vp',1,'p_var','lexer-parser.py',245),
  ('vpp -> COMMA CTEI','vpp',2,'p_var','lexer-parser.py',246),
  ('vpp -> empty','vpp',1,'p_var','lexer-parser.py',247),
  ('idp -> ID pnCheckNameTablaVar idpp','idp',3,'p_var','lexer-parser.py',248),
  ('idpp -> COMMA ID pnCheckNameTablaVar idpp','idpp',4,'p_var','lexer-parser.py',249),
  ('idpp -> empty','idpp',1,'p_var','lexer-parser.py',250),
  ('func -> FUNC returnval ARROW ID pnAddFuncinDir LEFT_PARENT pnCheckTablaVar param RIGHT_PARENT LEFT_CUR_BRACKET varp estatutop RIGHT_CUR_BRACKET pnCloseCurrentFunction','func',14,'p_func','lexer-parser.py',256),
  ('returnval -> tipo_simp','returnval',1,'p_func','lexer-parser.py',257),
  ('returnval -> VOID pnSaveTypeVar','returnval',2,'p_func','lexer-parser.py',258),
  ('param -> paramlist','param',1,'p_param','lexer-parser.py',264),
  ('param -> empty','param',1,'p_param','lexer-parser.py',265),
  ('paramlist -> tipoparam ARROW ID paramlistp','paramlist',4,'p_param','lexer-parser.py',266),
  ('tipoparam -> tipo_simp','tipoparam',1,'p_param','lexer-parser.py',267),
  ('tipoparam -> DATAFRAME','tipoparam',1,'p_param','lexer-parser.py',268),
  ('paramlistp -> COMMA paramlist','paramlistp',2,'p_param','lexer-parser.py',269),
  ('paramlistp -> empty','paramlistp',1,'p_param','lexer-parser.py',270),
  ('estatuto -> asign','estatuto',1,'p_estatuto','lexer-parser.py',276),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','lexer-parser.py',277),
  ('estatuto -> lee','estatuto',1,'p_estatuto','lexer-parser.py',278),
  ('estatuto -> escribe','estatuto',1,'p_estatuto','lexer-parser.py',279),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','lexer-parser.py',280),
  ('estatuto -> ciclow','estatuto',1,'p_estatuto','lexer-parser.py',281),
  ('estatuto -> ciclof','estatuto',1,'p_estatuto','lexer-parser.py',282),
  ('estatuto -> funcesp','estatuto',1,'p_estatuto','lexer-parser.py',283),
  ('estatuto -> return','estatuto',1,'p_estatuto','lexer-parser.py',284),
  ('estatuto -> copy','estatuto',1,'p_estatuto','lexer-parser.py',285),
  ('asign -> variable ASIGN exp SEMICOLON','asign',4,'p_asign','lexer-parser.py',291),
  ('lee -> READ LEFT_PARENT variable RIGHT_PARENT SEMICOLON','lee',5,'p_lee','lexer-parser.py',297),
  ('escribe -> WRITE LEFT_PARENT escribep RIGHT_PARENT SEMICOLON','escribe',5,'p_escribe','lexer-parser.py',303),
  ('escribep -> exp','escribep',1,'p_escribe','lexer-parser.py',304),
  ('escribep -> LETRERO','escribep',1,'p_escribe','lexer-parser.py',305),
  ('return -> RETURNS exp SEMICOLON','return',3,'p_return','lexer-parser.py',311),
  ('exp -> exprel logic','exp',2,'p_exp','lexer-parser.py',317),
  ('logic -> logicsig exprel logic','logic',3,'p_exp','lexer-parser.py',318),
  ('logic -> empty','logic',1,'p_exp','lexer-parser.py',319),
  ('logicsig -> AND','logicsig',1,'p_exp','lexer-parser.py',320),
  ('logicsig -> OR','logicsig',1,'p_exp','lexer-parser.py',321),
  ('exprel -> e relacionalp','exprel',2,'p_exprel','lexer-parser.py',327),
  ('relacionalp -> relsig e relacionalp','relacionalp',3,'p_exprel','lexer-parser.py',328),
  ('relacionalp -> empty','relacionalp',1,'p_exprel','lexer-parser.py',329),
  ('relsig -> LESS_THAN','relsig',1,'p_exprel','lexer-parser.py',330),
  ('relsig -> GREATER_THAN','relsig',1,'p_exprel','lexer-parser.py',331),
  ('relsig -> EQUALS','relsig',1,'p_exprel','lexer-parser.py',332),
  ('relsig -> NOTEQUALS','relsig',1,'p_exprel','lexer-parser.py',333),
  ('e -> t tp','e',2,'p_e','lexer-parser.py',339),
  ('tp -> tsig t tp','tp',3,'p_e','lexer-parser.py',340),
  ('tp -> empty','tp',1,'p_e','lexer-parser.py',341),
  ('tsig -> PLUS','tsig',1,'p_e','lexer-parser.py',342),
  ('tsig -> MINUS','tsig',1,'p_e','lexer-parser.py',343),
  ('t -> f fp','t',2,'p_t','lexer-parser.py',349),
  ('fp -> fsig f fp','fp',3,'p_t','lexer-parser.py',350),
  ('fp -> empty','fp',1,'p_t','lexer-parser.py',351),
  ('fsig -> MULT','fsig',1,'p_t','lexer-parser.py',352),
  ('fsig -> DIV','fsig',1,'p_t','lexer-parser.py',353),
  ('f -> LEFT_PARENT exp RIGHT_PARENT','f',3,'p_f','lexer-parser.py',359),
  ('f -> CTEI','f',1,'p_f','lexer-parser.py',360),
  ('f -> CTEF','f',1,'p_f','lexer-parser.py',361),
  ('f -> CTEC','f',1,'p_f','lexer-parser.py',362),
  ('f -> variable','f',1,'p_f','lexer-parser.py',363),
  ('f -> llamada','f',1,'p_f','lexer-parser.py',364),
  ('f -> funcesp','f',1,'p_f','lexer-parser.py',365),
  ('condicion -> IF LEFT_PARENT exp RIGHT_PARENT IF_TRUE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET falsop','condicion',9,'p_condicion','lexer-parser.py',371),
  ('falsop -> IF_FALSE LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','falsop',4,'p_condicion','lexer-parser.py',372),
  ('falsop -> empty','falsop',1,'p_condicion','lexer-parser.py',373),
  ('ciclow -> WHILE LEFT_PARENT exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclow',7,'p_ciclow','lexer-parser.py',379),
  ('ciclof -> FOR LEFT_PARENT asign exp RIGHT_PARENT LEFT_CUR_BRACKET estatutop RIGHT_CUR_BRACKET','ciclof',8,'p_ciclof','lexer-parser.py',385),
  ('funcesp -> mean','funcesp',1,'p_funcesp','lexer-parser.py',391),
  ('funcesp -> mode','funcesp',1,'p_funcesp','lexer-parser.py',392),
  ('funcesp -> median','funcesp',1,'p_funcesp','lexer-parser.py',393),
  ('funcesp -> variance','funcesp',1,'p_funcesp','lexer-parser.py',394),
  ('funcesp -> max','funcesp',1,'p_funcesp','lexer-parser.py',395),
  ('funcesp -> min','funcesp',1,'p_funcesp','lexer-parser.py',396),
  ('funcesp -> staddes','funcesp',1,'p_funcesp','lexer-parser.py',397),
  ('funcesp -> boxplot','funcesp',1,'p_funcesp','lexer-parser.py',398),
  ('funcesp -> linreg','funcesp',1,'p_funcesp','lexer-parser.py',399),
  ('funcesp -> copy','funcesp',1,'p_funcesp','lexer-parser.py',400),
  ('mean -> MEAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mean',5,'p_mean','lexer-parser.py',406),
  ('mode -> MODE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','mode',5,'p_mode','lexer-parser.py',412),
  ('median -> MEDIAN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','median',5,'p_median','lexer-parser.py',418),
  ('variance -> VARIANCE LEFT_PARENT variable RIGHT_PARENT SEMICOLON','variance',5,'p_variance','lexer-parser.py',424),
  ('max -> MAX LEFT_PARENT variable RIGHT_PARENT SEMICOLON','max',5,'p_max','lexer-parser.py',430),
  ('min -> MIN LEFT_PARENT variable RIGHT_PARENT SEMICOLON','min',5,'p_min','lexer-parser.py',436),
  ('staddes -> STADDES LEFT_PARENT variable RIGHT_PARENT SEMICOLON','staddes',5,'p_staddes','lexer-parser.py',442),
  ('boxplot -> BOXPLOT LEFT_PARENT variable RIGHT_PARENT SEMICOLON','boxplot',5,'p_boxplot','lexer-parser.py',448),
  ('linreg -> LINREG LEFT_PARENT variable RIGHT_PARENT SEMICOLON','linreg',5,'p_linreg','lexer-parser.py',454),
  ('pnCrearDirFunc -> empty','pnCrearDirFunc',1,'p_pnCrearDirFunc','lexer-parser.py',464),
  ('pnScriptFuncDir -> empty','pnScriptFuncDir',1,'p_pnScriptFuncDir','lexer-parser.py',474),
  ('pnCheckTablaVar -> empty','pnCheckTablaVar',1,'p_pnCheckTablaVar','lexer-parser.py',483),
  ('pnSaveTypeVar -> empty','pnSaveTypeVar',1,'p_pnSaveTypeVar','lexer-parser.py',491),
  ('pnCheckNameTablaVar -> empty','pnCheckNameTablaVar',1,'p_pnCheckNameTablaVar','lexer-parser.py',500),
  ('pnAddFuncinDir -> empty','pnAddFuncinDir',1,'p_pnAddFuncinDir','lexer-parser.py',507),
  ('pnCloseCurrentFunction -> empty','pnCloseCurrentFunction',1,'p_pnCloseCurrentFunction','lexer-parser.py',521),
  ('pnEndScript -> empty','pnEndScript',1,'p_pnEndScript','lexer-parser.py',530),
  ('empty -> <empty>','empty',0,'p_empty','lexer-parser.py',537),
]
